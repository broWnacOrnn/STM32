
foru.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007958  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007ae0  08007ae0  00008ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007afc  08007afc  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  08007afc  08007afc  00008afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b04  08007b04  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b04  08007b04  00008b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b08  08007b08  00008b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007b0c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009080  2**0
                  CONTENTS
 10 .bss          0000097c  20000080  20000080  00009080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009fc  200009fc  00009080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010934  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dc3  00000000  00000000  000199e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  0001c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a00  00000000  00000000  0001d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b84  00000000  00000000  0001dee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125cb  00000000  00000000  00040a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7b35  00000000  00000000  0005302f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ab64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039bc  00000000  00000000  0011aba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0011e564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007ac8 	.word	0x08007ac8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08007ac8 	.word	0x08007ac8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 faa4 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f812 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f8a8 	bl	8000618 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f878 	bl	80005bc <MX_I2C1_Init>
  MX_USB_HOST_Init();
 80004cc:	f006 feca 	bl	8007264 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004d0:	f006 feee 	bl	80072b0 <MX_USB_HOST_Process>
    GPIOE->ODR = (uint16_t) value;
 80004d4:	4b02      	ldr	r3, [pc, #8]	@ (80004e0 <main+0x28>)
 80004d6:	781a      	ldrb	r2, [r3, #0]
 80004d8:	4b02      	ldr	r3, [pc, #8]	@ (80004e4 <main+0x2c>)
 80004da:	615a      	str	r2, [r3, #20]
    MX_USB_HOST_Process();
 80004dc:	bf00      	nop
 80004de:	e7f7      	b.n	80004d0 <main+0x18>
 80004e0:	20000000 	.word	0x20000000
 80004e4:	40021000 	.word	0x40021000

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b094      	sub	sp, #80	@ 0x50
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2230      	movs	r2, #48	@ 0x30
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f007 fa58 	bl	80079ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	4b28      	ldr	r3, [pc, #160]	@ (80005b4 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000514:	4a27      	ldr	r2, [pc, #156]	@ (80005b4 <SystemClock_Config+0xcc>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800051a:	6413      	str	r3, [r2, #64]	@ 0x40
 800051c:	4b25      	ldr	r3, [pc, #148]	@ (80005b4 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	4b22      	ldr	r3, [pc, #136]	@ (80005b8 <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a21      	ldr	r2, [pc, #132]	@ (80005b8 <SystemClock_Config+0xd0>)
 8000532:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4b1f      	ldr	r3, [pc, #124]	@ (80005b8 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000544:	2301      	movs	r3, #1
 8000546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000548:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800054c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000552:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000558:	2308      	movs	r3, #8
 800055a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800055c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000560:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000562:	2302      	movs	r3, #2
 8000564:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000566:	2307      	movs	r3, #7
 8000568:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	4618      	mov	r0, r3
 8000570:	f003 f806 	bl	8003580 <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800057a:	f000 f923 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	2302      	movs	r3, #2
 8000584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800058a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2105      	movs	r1, #5
 800059c:	4618      	mov	r0, r3
 800059e:	f003 fa67 	bl	8003a70 <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005a8:	f000 f90c 	bl	80007c4 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3750      	adds	r7, #80	@ 0x50
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c0:	4b12      	ldr	r3, [pc, #72]	@ (800060c <MX_I2C1_Init+0x50>)
 80005c2:	4a13      	ldr	r2, [pc, #76]	@ (8000610 <MX_I2C1_Init+0x54>)
 80005c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005c6:	4b11      	ldr	r3, [pc, #68]	@ (800060c <MX_I2C1_Init+0x50>)
 80005c8:	4a12      	ldr	r2, [pc, #72]	@ (8000614 <MX_I2C1_Init+0x58>)
 80005ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <MX_I2C1_Init+0x50>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_I2C1_Init+0x50>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <MX_I2C1_Init+0x50>)
 80005da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ec:	4b07      	ldr	r3, [pc, #28]	@ (800060c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f2:	4b06      	ldr	r3, [pc, #24]	@ (800060c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f8:	4804      	ldr	r0, [pc, #16]	@ (800060c <MX_I2C1_Init+0x50>)
 80005fa:	f002 fe7d 	bl	80032f8 <HAL_I2C_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000604:	f000 f8de 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000009c 	.word	0x2000009c
 8000610:	40005400 	.word	0x40005400
 8000614:	000186a0 	.word	0x000186a0

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	@ 0x30
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
 8000632:	4b5e      	ldr	r3, [pc, #376]	@ (80007ac <MX_GPIO_Init+0x194>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a5d      	ldr	r2, [pc, #372]	@ (80007ac <MX_GPIO_Init+0x194>)
 8000638:	f043 0310 	orr.w	r3, r3, #16
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b5b      	ldr	r3, [pc, #364]	@ (80007ac <MX_GPIO_Init+0x194>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0310 	and.w	r3, r3, #16
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	4b57      	ldr	r3, [pc, #348]	@ (80007ac <MX_GPIO_Init+0x194>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	4a56      	ldr	r2, [pc, #344]	@ (80007ac <MX_GPIO_Init+0x194>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	@ 0x30
 800065a:	4b54      	ldr	r3, [pc, #336]	@ (80007ac <MX_GPIO_Init+0x194>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b50      	ldr	r3, [pc, #320]	@ (80007ac <MX_GPIO_Init+0x194>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a4f      	ldr	r2, [pc, #316]	@ (80007ac <MX_GPIO_Init+0x194>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b4d      	ldr	r3, [pc, #308]	@ (80007ac <MX_GPIO_Init+0x194>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b49      	ldr	r3, [pc, #292]	@ (80007ac <MX_GPIO_Init+0x194>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a48      	ldr	r2, [pc, #288]	@ (80007ac <MX_GPIO_Init+0x194>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b46      	ldr	r3, [pc, #280]	@ (80007ac <MX_GPIO_Init+0x194>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b42      	ldr	r3, [pc, #264]	@ (80007ac <MX_GPIO_Init+0x194>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a41      	ldr	r2, [pc, #260]	@ (80007ac <MX_GPIO_Init+0x194>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b3f      	ldr	r3, [pc, #252]	@ (80007ac <MX_GPIO_Init+0x194>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b3b      	ldr	r3, [pc, #236]	@ (80007ac <MX_GPIO_Init+0x194>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a3a      	ldr	r2, [pc, #232]	@ (80007ac <MX_GPIO_Init+0x194>)
 80006c4:	f043 0308 	orr.w	r3, r3, #8
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b38      	ldr	r3, [pc, #224]	@ (80007ac <MX_GPIO_Init+0x194>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80006d6:	2200      	movs	r2, #0
 80006d8:	21fb      	movs	r1, #251	@ 0xfb
 80006da:	4835      	ldr	r0, [pc, #212]	@ (80007b0 <MX_GPIO_Init+0x198>)
 80006dc:	f000 fcd8 	bl	8001090 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80006e6:	4833      	ldr	r0, [pc, #204]	@ (80007b4 <MX_GPIO_Init+0x19c>)
 80006e8:	f000 fcd2 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6
                           PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80006ec:	23fb      	movs	r3, #251	@ 0xfb
 80006ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f8:	2302      	movs	r3, #2
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	482b      	ldr	r0, [pc, #172]	@ (80007b0 <MX_GPIO_Init+0x198>)
 8000704:	f000 fb28 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000708:	2308      	movs	r3, #8
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000718:	2305      	movs	r3, #5
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4825      	ldr	r0, [pc, #148]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 8000724:	f000 fb18 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000728:	2301      	movs	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800072c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	481f      	ldr	r0, [pc, #124]	@ (80007bc <MX_GPIO_Init+0x1a4>)
 800073e:	f000 fb0b 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000754:	2305      	movs	r3, #5
 8000756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4818      	ldr	r0, [pc, #96]	@ (80007c0 <MX_GPIO_Init+0x1a8>)
 8000760:	f000 fafa 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000764:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <MX_GPIO_Init+0x19c>)
 800077e:	f000 faeb 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000782:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000794:	2306      	movs	r3, #6
 8000796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <MX_GPIO_Init+0x1a0>)
 80007a0:	f000 fada 	bl	8000d58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a4:	bf00      	nop
 80007a6:	3730      	adds	r7, #48	@ 0x30
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40020c00 	.word	0x40020c00
 80007b8:	40020800 	.word	0x40020800
 80007bc:	40020000 	.word	0x40020000
 80007c0:	40020400 	.word	0x40020400

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007de:	4a0f      	ldr	r2, [pc, #60]	@ (800081c <HAL_MspInit+0x4c>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	4a08      	ldr	r2, [pc, #32]	@ (800081c <HAL_MspInit+0x4c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	@ 0x40
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800080e:	2007      	movs	r0, #7
 8000810:	f000 fa60 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800

08000820 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a19      	ldr	r2, [pc, #100]	@ (80008a4 <HAL_I2C_MspInit+0x84>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d12c      	bne.n	800089c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <HAL_I2C_MspInit+0x88>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <HAL_I2C_MspInit+0x88>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_I2C_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800085e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000864:	2312      	movs	r3, #18
 8000866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000868:	2301      	movs	r3, #1
 800086a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000870:	2304      	movs	r3, #4
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	480c      	ldr	r0, [pc, #48]	@ (80008ac <HAL_I2C_MspInit+0x8c>)
 800087c:	f000 fa6c 	bl	8000d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <HAL_I2C_MspInit+0x88>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	4a07      	ldr	r2, [pc, #28]	@ (80008a8 <HAL_I2C_MspInit+0x88>)
 800088a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800088e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000890:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <HAL_I2C_MspInit+0x88>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	@ 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40005400 	.word	0x40005400
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020400 	.word	0x40020400

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <NMI_Handler+0x4>

080008b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <MemManage_Handler+0x4>

080008c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f000 f8d1 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000914:	4802      	ldr	r0, [pc, #8]	@ (8000920 <OTG_FS_IRQHandler+0x10>)
 8000916:	f000 feb5 	bl	8001684 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200004d4 	.word	0x200004d4

08000924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800092c:	4a14      	ldr	r2, [pc, #80]	@ (8000980 <_sbrk+0x5c>)
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <_sbrk+0x60>)
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d102      	bne.n	8000946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <_sbrk+0x64>)
 8000942:	4a12      	ldr	r2, [pc, #72]	@ (800098c <_sbrk+0x68>)
 8000944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	429a      	cmp	r2, r3
 8000952:	d207      	bcs.n	8000964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000954:	f007 f842 	bl	80079dc <__errno>
 8000958:	4603      	mov	r3, r0
 800095a:	220c      	movs	r2, #12
 800095c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
 8000962:	e009      	b.n	8000978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000964:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096a:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	4a05      	ldr	r2, [pc, #20]	@ (8000988 <_sbrk+0x64>)
 8000974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20020000 	.word	0x20020000
 8000984:	00000400 	.word	0x00000400
 8000988:	200000f0 	.word	0x200000f0
 800098c:	20000a00 	.word	0x20000a00

08000990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <SystemInit+0x20>)
 8000996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800099a:	4a05      	ldr	r2, [pc, #20]	@ (80009b0 <SystemInit+0x20>)
 800099c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009b8:	f7ff ffea 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009bc:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009be:	490d      	ldr	r1, [pc, #52]	@ (80009f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a00 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e2:	f007 f801 	bl	80079e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009e6:	f7ff fd67 	bl	80004b8 <main>
  bx  lr    
 80009ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80009f8:	08007b0c 	.word	0x08007b0c
  ldr r2, =_sbss
 80009fc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000a00:	200009fc 	.word	0x200009fc

08000a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <HAL_Init+0x40>)
 8000a12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a18:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <HAL_Init+0x40>)
 8000a1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <HAL_Init+0x40>)
 8000a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f94f 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 f808 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff fec8 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023c00 	.word	0x40023c00

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_InitTick+0x54>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_InitTick+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f967 	bl	8000d3e <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f000 f92f 	bl	8000cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	@ (8000aa8 <HAL_InitTick+0x5c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000004 	.word	0x20000004
 8000aa4:	2000000c 	.word	0x2000000c
 8000aa8:	20000008 	.word	0x20000008

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	2000000c 	.word	0x2000000c
 8000ad0:	200000f4 	.word	0x200000f4

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000f4 	.word	0x200000f4

08000aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af4:	f7ff ffee 	bl	8000ad4 <HAL_GetTick>
 8000af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b04:	d005      	beq.n	8000b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b06:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <HAL_Delay+0x44>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b12:	bf00      	nop
 8000b14:	f7ff ffde 	bl	8000ad4 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8f7      	bhi.n	8000b14 <HAL_Delay+0x28>
  {
  }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000000c 	.word	0x2000000c

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	@ (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4907      	ldr	r1, [pc, #28]	@ (8000bd0 <__NVIC_EnableIRQ+0x38>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	@ (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	@ (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	@ 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	@ 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ff8e 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff29 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff3e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ff8e 	bl	8000c28 <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff5d 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff31 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffa2 	bl	8000c90 <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	e16b      	b.n	800104c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 815a 	bne.w	8001046 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d005      	beq.n	8000daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d130      	bne.n	8000e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	f003 0201 	and.w	r2, r3, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d017      	beq.n	8000e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d123      	bne.n	8000e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	69b9      	ldr	r1, [r7, #24]
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0203 	and.w	r2, r3, #3
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80b4 	beq.w	8001046 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b60      	ldr	r3, [pc, #384]	@ (8001064 <HAL_GPIO_Init+0x30c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a5f      	ldr	r2, [pc, #380]	@ (8001064 <HAL_GPIO_Init+0x30c>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b5d      	ldr	r3, [pc, #372]	@ (8001064 <HAL_GPIO_Init+0x30c>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efa:	4a5b      	ldr	r2, [pc, #364]	@ (8001068 <HAL_GPIO_Init+0x310>)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a52      	ldr	r2, [pc, #328]	@ (800106c <HAL_GPIO_Init+0x314>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d02b      	beq.n	8000f7e <HAL_GPIO_Init+0x226>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a51      	ldr	r2, [pc, #324]	@ (8001070 <HAL_GPIO_Init+0x318>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d025      	beq.n	8000f7a <HAL_GPIO_Init+0x222>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a50      	ldr	r2, [pc, #320]	@ (8001074 <HAL_GPIO_Init+0x31c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d01f      	beq.n	8000f76 <HAL_GPIO_Init+0x21e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4f      	ldr	r2, [pc, #316]	@ (8001078 <HAL_GPIO_Init+0x320>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d019      	beq.n	8000f72 <HAL_GPIO_Init+0x21a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4e      	ldr	r2, [pc, #312]	@ (800107c <HAL_GPIO_Init+0x324>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d013      	beq.n	8000f6e <HAL_GPIO_Init+0x216>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4d      	ldr	r2, [pc, #308]	@ (8001080 <HAL_GPIO_Init+0x328>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d00d      	beq.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4c      	ldr	r2, [pc, #304]	@ (8001084 <HAL_GPIO_Init+0x32c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d007      	beq.n	8000f66 <HAL_GPIO_Init+0x20e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4b      	ldr	r2, [pc, #300]	@ (8001088 <HAL_GPIO_Init+0x330>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_GPIO_Init+0x20a>
 8000f5e:	2307      	movs	r3, #7
 8000f60:	e00e      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f62:	2308      	movs	r3, #8
 8000f64:	e00c      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f66:	2306      	movs	r3, #6
 8000f68:	e00a      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	e008      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f72:	2303      	movs	r3, #3
 8000f74:	e004      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e002      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <HAL_GPIO_Init+0x228>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	69fa      	ldr	r2, [r7, #28]
 8000f82:	f002 0203 	and.w	r2, r2, #3
 8000f86:	0092      	lsls	r2, r2, #2
 8000f88:	4093      	lsls	r3, r2
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f90:	4935      	ldr	r1, [pc, #212]	@ (8001068 <HAL_GPIO_Init+0x310>)
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800108c <HAL_GPIO_Init+0x334>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fc2:	4a32      	ldr	r2, [pc, #200]	@ (800108c <HAL_GPIO_Init+0x334>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc8:	4b30      	ldr	r3, [pc, #192]	@ (800108c <HAL_GPIO_Init+0x334>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fec:	4a27      	ldr	r2, [pc, #156]	@ (800108c <HAL_GPIO_Init+0x334>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ff2:	4b26      	ldr	r3, [pc, #152]	@ (800108c <HAL_GPIO_Init+0x334>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001016:	4a1d      	ldr	r2, [pc, #116]	@ (800108c <HAL_GPIO_Init+0x334>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <HAL_GPIO_Init+0x334>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001040:	4a12      	ldr	r2, [pc, #72]	@ (800108c <HAL_GPIO_Init+0x334>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3301      	adds	r3, #1
 800104a:	61fb      	str	r3, [r7, #28]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	2b0f      	cmp	r3, #15
 8001050:	f67f ae90 	bls.w	8000d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3724      	adds	r7, #36	@ 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40013800 	.word	0x40013800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40021400 	.word	0x40021400
 8001084:	40021800 	.word	0x40021800
 8001088:	40021c00 	.word	0x40021c00
 800108c:	40013c00 	.word	0x40013c00

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010ac:	e003      	b.n	80010b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	041a      	lsls	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	619a      	str	r2, [r3, #24]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af02      	add	r7, sp, #8
 80010c8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e059      	b.n	8001188 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d106      	bne.n	80010f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f006 f916 	bl	8007320 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2203      	movs	r2, #3
 80010f8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001102:	d102      	bne.n	800110a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f002 ff2f 	bl	8003f72 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7c1a      	ldrb	r2, [r3, #16]
 800111c:	f88d 2000 	strb.w	r2, [sp]
 8001120:	3304      	adds	r3, #4
 8001122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001124:	f002 feb0 	bl	8003e88 <USB_CoreInit>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2202      	movs	r2, #2
 8001132:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e026      	b.n	8001188 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2101      	movs	r1, #1
 8001140:	4618      	mov	r0, r3
 8001142:	f002 ff27 	bl	8003f94 <USB_SetCurrentMode>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2202      	movs	r2, #2
 8001150:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e017      	b.n	8001188 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7c1a      	ldrb	r2, [r3, #16]
 8001160:	f88d 2000 	strb.w	r2, [sp]
 8001164:	3304      	adds	r3, #4
 8001166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001168:	f003 f8ca 	bl	8004300 <USB_HostInit>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2202      	movs	r2, #2
 8001176:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e004      	b.n	8001188 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b08b      	sub	sp, #44	@ 0x2c
 8001194:	af04      	add	r7, sp, #16
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	4608      	mov	r0, r1
 800119a:	4611      	mov	r1, r2
 800119c:	461a      	mov	r2, r3
 800119e:	4603      	mov	r3, r0
 80011a0:	70fb      	strb	r3, [r7, #3]
 80011a2:	460b      	mov	r3, r1
 80011a4:	70bb      	strb	r3, [r7, #2]
 80011a6:	4613      	mov	r3, r2
 80011a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80011aa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80011ac:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_HCD_HC_Init+0x2c>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e09d      	b.n	80012f8 <HAL_HCD_HC_Init+0x168>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80011c4:	78fa      	ldrb	r2, [r7, #3]
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	3319      	adds	r3, #25
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80011d8:	78fa      	ldrb	r2, [r7, #3]
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	1a9b      	subs	r3, r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	3314      	adds	r3, #20
 80011e8:	787a      	ldrb	r2, [r7, #1]
 80011ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80011ec:	78fa      	ldrb	r2, [r7, #3]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	3315      	adds	r3, #21
 80011fc:	78fa      	ldrb	r2, [r7, #3]
 80011fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001200:	78fa      	ldrb	r2, [r7, #3]
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	1a9b      	subs	r3, r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	3326      	adds	r3, #38	@ 0x26
 8001210:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001214:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001216:	78fa      	ldrb	r2, [r7, #3]
 8001218:	78bb      	ldrb	r3, [r7, #2]
 800121a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800121e:	b2d8      	uxtb	r0, r3
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	1a9b      	subs	r3, r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	3316      	adds	r3, #22
 800122e:	4602      	mov	r2, r0
 8001230:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	4619      	mov	r1, r3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 fbc8 	bl	80019cc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800123c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da0a      	bge.n	800125a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001244:	78fa      	ldrb	r2, [r7, #3]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	1a9b      	subs	r3, r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	440b      	add	r3, r1
 8001252:	3317      	adds	r3, #23
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	e009      	b.n	800126e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800125a:	78fa      	ldrb	r2, [r7, #3]
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	1a9b      	subs	r3, r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	440b      	add	r3, r1
 8001268:	3317      	adds	r3, #23
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f003 f9a8 	bl	80045c8 <USB_GetHostSpeed>
 8001278:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800127a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800127e:	2b01      	cmp	r3, #1
 8001280:	d10b      	bne.n	800129a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001282:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001286:	2b01      	cmp	r3, #1
 8001288:	d107      	bne.n	800129a <HAL_HCD_HC_Init+0x10a>
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d104      	bne.n	800129a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	2bbc      	cmp	r3, #188	@ 0xbc
 8001294:	d901      	bls.n	800129a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001296:	23bc      	movs	r3, #188	@ 0xbc
 8001298:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800129a:	78fa      	ldrb	r2, [r7, #3]
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	1a9b      	subs	r3, r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	3318      	adds	r3, #24
 80012aa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80012ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80012b0:	78fa      	ldrb	r2, [r7, #3]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	b298      	uxth	r0, r3
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	3328      	adds	r3, #40	@ 0x28
 80012c4:	4602      	mov	r2, r0
 80012c6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	787c      	ldrb	r4, [r7, #1]
 80012d2:	78ba      	ldrb	r2, [r7, #2]
 80012d4:	78f9      	ldrb	r1, [r7, #3]
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	4623      	mov	r3, r4
 80012e6:	f003 f997 	bl	8004618 <USB_HC_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd90      	pop	{r4, r7, pc}

08001300 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_HCD_HC_Halt+0x1e>
 800131a:	2302      	movs	r3, #2
 800131c:	e00f      	b.n	800133e <HAL_HCD_HC_Halt+0x3e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	78fa      	ldrb	r2, [r7, #3]
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fd29 	bl	8004d86 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	4608      	mov	r0, r1
 8001352:	4611      	mov	r1, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4603      	mov	r3, r0
 8001358:	70fb      	strb	r3, [r7, #3]
 800135a:	460b      	mov	r3, r1
 800135c:	70bb      	strb	r3, [r7, #2]
 800135e:	4613      	mov	r3, r2
 8001360:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001362:	78fa      	ldrb	r2, [r7, #3]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	1a9b      	subs	r3, r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3317      	adds	r3, #23
 8001372:	78ba      	ldrb	r2, [r7, #2]
 8001374:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001376:	78fa      	ldrb	r2, [r7, #3]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	3326      	adds	r3, #38	@ 0x26
 8001386:	787a      	ldrb	r2, [r7, #1]
 8001388:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800138a:	7c3b      	ldrb	r3, [r7, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d114      	bne.n	80013ba <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001390:	78fa      	ldrb	r2, [r7, #3]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	1a9b      	subs	r3, r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	332a      	adds	r3, #42	@ 0x2a
 80013a0:	2203      	movs	r2, #3
 80013a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80013a4:	78fa      	ldrb	r2, [r7, #3]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	3319      	adds	r3, #25
 80013b4:	7f3a      	ldrb	r2, [r7, #28]
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e009      	b.n	80013ce <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013ba:	78fa      	ldrb	r2, [r7, #3]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	332a      	adds	r3, #42	@ 0x2a
 80013ca:	2202      	movs	r2, #2
 80013cc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80013ce:	787b      	ldrb	r3, [r7, #1]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	f200 8102 	bhi.w	80015da <HAL_HCD_HC_SubmitRequest+0x292>
 80013d6:	a201      	add	r2, pc, #4	@ (adr r2, 80013dc <HAL_HCD_HC_SubmitRequest+0x94>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	080013ed 	.word	0x080013ed
 80013e0:	080015c5 	.word	0x080015c5
 80013e4:	080014b1 	.word	0x080014b1
 80013e8:	0800153b 	.word	0x0800153b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80013ec:	7c3b      	ldrb	r3, [r7, #16]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	f040 80f5 	bne.w	80015de <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80013f4:	78bb      	ldrb	r3, [r7, #2]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d12d      	bne.n	8001456 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80013fa:	8b3b      	ldrh	r3, [r7, #24]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d109      	bne.n	8001414 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001400:	78fa      	ldrb	r2, [r7, #3]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	333d      	adds	r3, #61	@ 0x3d
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001414:	78fa      	ldrb	r2, [r7, #3]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	333d      	adds	r3, #61	@ 0x3d
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10a      	bne.n	8001440 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800142a:	78fa      	ldrb	r2, [r7, #3]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	332a      	adds	r3, #42	@ 0x2a
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800143e:	e0ce      	b.n	80015de <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001440:	78fa      	ldrb	r2, [r7, #3]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	332a      	adds	r3, #42	@ 0x2a
 8001450:	2202      	movs	r2, #2
 8001452:	701a      	strb	r2, [r3, #0]
      break;
 8001454:	e0c3      	b.n	80015de <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001456:	78fa      	ldrb	r2, [r7, #3]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	331a      	adds	r3, #26
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	f040 80b8 	bne.w	80015de <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	1a9b      	subs	r3, r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	333c      	adds	r3, #60	@ 0x3c
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10a      	bne.n	800149a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001484:	78fa      	ldrb	r2, [r7, #3]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	332a      	adds	r3, #42	@ 0x2a
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
      break;
 8001498:	e0a1      	b.n	80015de <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800149a:	78fa      	ldrb	r2, [r7, #3]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	1a9b      	subs	r3, r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	332a      	adds	r3, #42	@ 0x2a
 80014aa:	2202      	movs	r2, #2
 80014ac:	701a      	strb	r2, [r3, #0]
      break;
 80014ae:	e096      	b.n	80015de <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80014b0:	78bb      	ldrb	r3, [r7, #2]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d120      	bne.n	80014f8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014b6:	78fa      	ldrb	r2, [r7, #3]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	333d      	adds	r3, #61	@ 0x3d
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10a      	bne.n	80014e2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014cc:	78fa      	ldrb	r2, [r7, #3]
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	332a      	adds	r3, #42	@ 0x2a
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80014e0:	e07e      	b.n	80015e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014e2:	78fa      	ldrb	r2, [r7, #3]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	332a      	adds	r3, #42	@ 0x2a
 80014f2:	2202      	movs	r2, #2
 80014f4:	701a      	strb	r2, [r3, #0]
      break;
 80014f6:	e073      	b.n	80015e0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80014f8:	78fa      	ldrb	r2, [r7, #3]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	333c      	adds	r3, #60	@ 0x3c
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10a      	bne.n	8001524 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800150e:	78fa      	ldrb	r2, [r7, #3]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	332a      	adds	r3, #42	@ 0x2a
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
      break;
 8001522:	e05d      	b.n	80015e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	332a      	adds	r3, #42	@ 0x2a
 8001534:	2202      	movs	r2, #2
 8001536:	701a      	strb	r2, [r3, #0]
      break;
 8001538:	e052      	b.n	80015e0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800153a:	78bb      	ldrb	r3, [r7, #2]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d120      	bne.n	8001582 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001540:	78fa      	ldrb	r2, [r7, #3]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	333d      	adds	r3, #61	@ 0x3d
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10a      	bne.n	800156c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001556:	78fa      	ldrb	r2, [r7, #3]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	1a9b      	subs	r3, r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	332a      	adds	r3, #42	@ 0x2a
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800156a:	e039      	b.n	80015e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800156c:	78fa      	ldrb	r2, [r7, #3]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	332a      	adds	r3, #42	@ 0x2a
 800157c:	2202      	movs	r2, #2
 800157e:	701a      	strb	r2, [r3, #0]
      break;
 8001580:	e02e      	b.n	80015e0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	333c      	adds	r3, #60	@ 0x3c
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10a      	bne.n	80015ae <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	332a      	adds	r3, #42	@ 0x2a
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
      break;
 80015ac:	e018      	b.n	80015e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015ae:	78fa      	ldrb	r2, [r7, #3]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	332a      	adds	r3, #42	@ 0x2a
 80015be:	2202      	movs	r2, #2
 80015c0:	701a      	strb	r2, [r3, #0]
      break;
 80015c2:	e00d      	b.n	80015e0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	1a9b      	subs	r3, r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	332a      	adds	r3, #42	@ 0x2a
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
      break;
 80015d8:	e002      	b.n	80015e0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80015da:	bf00      	nop
 80015dc:	e000      	b.n	80015e0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80015de:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80015e0:	78fa      	ldrb	r2, [r7, #3]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	332c      	adds	r3, #44	@ 0x2c
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	8b39      	ldrh	r1, [r7, #24]
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	1a9b      	subs	r3, r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4403      	add	r3, r0
 8001604:	3334      	adds	r3, #52	@ 0x34
 8001606:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001608:	78fa      	ldrb	r2, [r7, #3]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	011b      	lsls	r3, r3, #4
 8001610:	1a9b      	subs	r3, r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	334c      	adds	r3, #76	@ 0x4c
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	1a9b      	subs	r3, r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	3338      	adds	r3, #56	@ 0x38
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001630:	78fa      	ldrb	r2, [r7, #3]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	3315      	adds	r3, #21
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	334d      	adds	r3, #77	@ 0x4d
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	4613      	mov	r3, r2
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	1a9b      	subs	r3, r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	3310      	adds	r3, #16
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	4413      	add	r3, r2
 800166c:	1d19      	adds	r1, r3, #4
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	799b      	ldrb	r3, [r3, #6]
 8001672:	461a      	mov	r2, r3
 8001674:	f003 f8fc 	bl	8004870 <USB_HC_StartXfer>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop

08001684 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f002 fdf0 	bl	8004280 <USB_GetMode>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	f040 80fb 	bne.w	800189e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fdb3 	bl	8004218 <USB_ReadInterrupts>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80f1 	beq.w	800189c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fdaa 	bl	8004218 <USB_ReadInterrupts>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80016ce:	d104      	bne.n	80016da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80016d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fd9a 	bl	8004218 <USB_ReadInterrupts>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80016ee:	d104      	bne.n	80016fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 fd8a 	bl	8004218 <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800170a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800170e:	d104      	bne.n	800171a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001718:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f002 fd7a 	bl	8004218 <USB_ReadInterrupts>
 8001724:	4603      	mov	r3, r0
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b02      	cmp	r3, #2
 800172c:	d103      	bne.n	8001736 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2202      	movs	r2, #2
 8001734:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f002 fd6c 	bl	8004218 <USB_ReadInterrupts>
 8001740:	4603      	mov	r3, r0
 8001742:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001746:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800174a:	d120      	bne.n	800178e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001754:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d113      	bne.n	800178e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001766:	2110      	movs	r1, #16
 8001768:	6938      	ldr	r0, [r7, #16]
 800176a:	f002 fc5f 	bl	800402c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800176e:	6938      	ldr	r0, [r7, #16]
 8001770:	f002 fc8e 	bl	8004090 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7a5b      	ldrb	r3, [r3, #9]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d105      	bne.n	8001788 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fe80 	bl	8004488 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f005 fe47 	bl	800741c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fd40 	bl	8004218 <USB_ReadInterrupts>
 8001798:	4603      	mov	r3, r0
 800179a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800179e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a2:	d102      	bne.n	80017aa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f001 fd33 	bl	8003210 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fd32 	bl	8004218 <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d106      	bne.n	80017cc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f005 fe10 	bl	80073e4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2208      	movs	r2, #8
 80017ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fd21 	bl	8004218 <USB_ReadInterrupts>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80017e0:	d139      	bne.n	8001856 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fabc 	bl	8004d64 <USB_HC_ReadInterrupt>
 80017ec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e025      	b.n	8001840 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d018      	beq.n	800183a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800181a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800181e:	d106      	bne.n	800182e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4619      	mov	r1, r3
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f905 	bl	8001a36 <HCD_HC_IN_IRQHandler>
 800182c:	e005      	b.n	800183a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 ff67 	bl	8002708 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	795b      	ldrb	r3, [r3, #5]
 8001844:	461a      	mov	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	4293      	cmp	r3, r2
 800184a:	d3d3      	bcc.n	80017f4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f002 fcdc 	bl	8004218 <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	2b10      	cmp	r3, #16
 8001868:	d101      	bne.n	800186e <HAL_HCD_IRQHandler+0x1ea>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <HAL_HCD_IRQHandler+0x1ec>
 800186e:	2300      	movs	r3, #0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d014      	beq.n	800189e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0210 	bic.w	r2, r2, #16
 8001882:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f001 fbe4 	bl	8003052 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0210 	orr.w	r2, r2, #16
 8001898:	619a      	str	r2, [r3, #24]
 800189a:	e000      	b.n	800189e <HAL_HCD_IRQHandler+0x21a>
      return;
 800189c:	bf00      	nop
    }
  }
}
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_HCD_Start+0x16>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e013      	b.n	80018e2 <HAL_HCD_Start+0x3e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2101      	movs	r1, #1
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 fe44 	bl	8004556 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fb3c 	bl	8003f50 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_HCD_Stop+0x16>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e00d      	b.n	800191c <HAL_HCD_Stop+0x32>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f003 fb97 	bl	8005040 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fde6 	bl	8004502 <USB_ResetPort>
 8001936:	4603      	mov	r3, r0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	334c      	adds	r3, #76	@ 0x4c
 800195c:	781b      	ldrb	r3, [r3, #0]
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	3338      	adds	r3, #56	@ 0x38
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fe28 	bl	80045f6 <USB_GetCurrentFrame>
 80019a6:	4603      	mov	r3, r0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 fe03 	bl	80045c8 <USB_GetHostSpeed>
 80019c2:	4603      	mov	r3, r0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	331a      	adds	r3, #26
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	331b      	adds	r3, #27
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3325      	adds	r3, #37	@ 0x25
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	3324      	adds	r3, #36	@ 0x24
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 fbf2 	bl	800423e <USB_ReadChInterrupts>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d11a      	bne.n	8001a9a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	015a      	lsls	r2, r3, #5
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a70:	461a      	mov	r2, r3
 8001a72:	2304      	movs	r3, #4
 8001a74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	334d      	adds	r3, #77	@ 0x4d
 8001a86:	2207      	movs	r2, #7
 8001a88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	78fa      	ldrb	r2, [r7, #3]
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 f977 	bl	8004d86 <USB_HC_Halt>
 8001a98:	e09e      	b.n	8001bd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 fbcb 	bl	800423e <USB_ReadChInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ab2:	d11b      	bne.n	8001aec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	015a      	lsls	r2, r3, #5
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	334d      	adds	r3, #77	@ 0x4d
 8001ad8:	2208      	movs	r2, #8
 8001ada:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 f94e 	bl	8004d86 <USB_HC_Halt>
 8001aea:	e075      	b.n	8001bd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 fba2 	bl	800423e <USB_ReadChInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d11a      	bne.n	8001b3a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	015a      	lsls	r2, r3, #5
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b10:	461a      	mov	r2, r3
 8001b12:	2308      	movs	r3, #8
 8001b14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	334d      	adds	r3, #77	@ 0x4d
 8001b26:	2206      	movs	r2, #6
 8001b28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	78fa      	ldrb	r2, [r7, #3]
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 f927 	bl	8004d86 <USB_HC_Halt>
 8001b38:	e04e      	b.n	8001bd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	4611      	mov	r1, r2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fb7b 	bl	800423e <USB_ReadChInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b52:	d11b      	bne.n	8001b8c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	015a      	lsls	r2, r3, #5
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b60:	461a      	mov	r2, r3
 8001b62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	334d      	adds	r3, #77	@ 0x4d
 8001b78:	2209      	movs	r2, #9
 8001b7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 f8fe 	bl	8004d86 <USB_HC_Halt>
 8001b8a:	e025      	b.n	8001bd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 fb52 	bl	800423e <USB_ReadChInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba0:	2b80      	cmp	r3, #128	@ 0x80
 8001ba2:	d119      	bne.n	8001bd8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	015a      	lsls	r2, r3, #5
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	334d      	adds	r3, #77	@ 0x4d
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 f8d7 	bl	8004d86 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 fb2c 	bl	800423e <USB_ReadChInterrupts>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bf0:	d112      	bne.n	8001c18 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	78fa      	ldrb	r2, [r7, #3]
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 f8c3 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	015a      	lsls	r2, r3, #5
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4413      	add	r3, r2
 8001c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c12:	6093      	str	r3, [r2, #8]
 8001c14:	f000 bd75 	b.w	8002702 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	78fa      	ldrb	r2, [r7, #3]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 fb0c 	bl	800423e <USB_ReadChInterrupts>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	f040 8128 	bne.w	8001e82 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2320      	movs	r3, #32
 8001c42:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	331b      	adds	r3, #27
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d119      	bne.n	8001c8e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	331b      	adds	r3, #27
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	0151      	lsls	r1, r2, #5
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	440a      	add	r2, r1
 8001c84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	799b      	ldrb	r3, [r3, #6]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01b      	beq.n	8001cce <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001c96:	78fa      	ldrb	r2, [r7, #3]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3330      	adds	r3, #48	@ 0x30
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	1ac9      	subs	r1, r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4403      	add	r3, r0
 8001cca:	3338      	adds	r3, #56	@ 0x38
 8001ccc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	334d      	adds	r3, #77	@ 0x4d
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	3344      	adds	r3, #68	@ 0x44
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d02:	461a      	mov	r2, r3
 8001d04:	2301      	movs	r3, #1
 8001d06:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	3326      	adds	r3, #38	@ 0x26
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00a      	beq.n	8001d34 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	1a9b      	subs	r3, r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3326      	adds	r3, #38	@ 0x26
 8001d2e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d110      	bne.n	8001d56 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 f822 	bl	8004d86 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2310      	movs	r3, #16
 8001d52:	6093      	str	r3, [r2, #8]
 8001d54:	e03d      	b.n	8001dd2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	3326      	adds	r3, #38	@ 0x26
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d00a      	beq.n	8001d82 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	3326      	adds	r3, #38	@ 0x26
 8001d7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d127      	bne.n	8001dd2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	78fa      	ldrb	r2, [r7, #3]
 8001d92:	0151      	lsls	r1, r2, #5
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	440a      	add	r2, r1
 8001d98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001d9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001da0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	334c      	adds	r3, #76	@ 0x4c
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	334c      	adds	r3, #76	@ 0x4c
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f005 fb33 	bl	8007438 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	799b      	ldrb	r3, [r3, #6]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d13b      	bne.n	8001e52 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	3338      	adds	r3, #56	@ 0x38
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4403      	add	r3, r0
 8001dfa:	3328      	adds	r3, #40	@ 0x28
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	440b      	add	r3, r1
 8001e00:	1e59      	subs	r1, r3, #1
 8001e02:	78fa      	ldrb	r2, [r7, #3]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4403      	add	r3, r0
 8001e10:	3328      	adds	r3, #40	@ 0x28
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8470 	beq.w	8002702 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	1a9b      	subs	r3, r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	333c      	adds	r3, #60	@ 0x3c
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	f083 0301 	eor.w	r3, r3, #1
 8001e3a:	b2d8      	uxtb	r0, r3
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	333c      	adds	r3, #60	@ 0x3c
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	f000 bc58 	b.w	8002702 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	333c      	adds	r3, #60	@ 0x3c
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	f083 0301 	eor.w	r3, r3, #1
 8001e6a:	b2d8      	uxtb	r0, r3
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	333c      	adds	r3, #60	@ 0x3c
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	f000 bc40 	b.w	8002702 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 f9d7 	bl	800423e <USB_ReadChInterrupts>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d131      	bne.n	8001efe <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	331a      	adds	r3, #26
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	f040 841f 	bne.w	8002702 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	331b      	adds	r3, #27
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	334d      	adds	r3, #77	@ 0x4d
 8001ee8:	2203      	movs	r2, #3
 8001eea:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 ff46 	bl	8004d86 <USB_HC_Halt>
 8001efa:	f000 bc02 	b.w	8002702 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	78fa      	ldrb	r2, [r7, #3]
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f002 f999 	bl	800423e <USB_ReadChInterrupts>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	f040 8305 	bne.w	8002522 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f24:	461a      	mov	r2, r3
 8001f26:	2302      	movs	r3, #2
 8001f28:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	334d      	adds	r3, #77	@ 0x4d
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d114      	bne.n	8001f6a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	334d      	adds	r3, #77	@ 0x4d
 8001f50:	2202      	movs	r2, #2
 8001f52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	334c      	adds	r3, #76	@ 0x4c
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e2cc      	b.n	8002504 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	334d      	adds	r3, #77	@ 0x4d
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b06      	cmp	r3, #6
 8001f7e:	d114      	bne.n	8001faa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	334d      	adds	r3, #77	@ 0x4d
 8001f90:	2202      	movs	r2, #2
 8001f92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	334c      	adds	r3, #76	@ 0x4c
 8001fa4:	2205      	movs	r2, #5
 8001fa6:	701a      	strb	r2, [r3, #0]
 8001fa8:	e2ac      	b.n	8002504 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	334d      	adds	r3, #77	@ 0x4d
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b07      	cmp	r3, #7
 8001fbe:	d00b      	beq.n	8001fd8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001fc0:	78fa      	ldrb	r2, [r7, #3]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	334d      	adds	r3, #77	@ 0x4d
 8001fd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001fd2:	2b09      	cmp	r3, #9
 8001fd4:	f040 80a6 	bne.w	8002124 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	334d      	adds	r3, #77	@ 0x4d
 8001fe8:	2202      	movs	r2, #2
 8001fea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3344      	adds	r3, #68	@ 0x44
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	1c59      	adds	r1, r3, #1
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4403      	add	r3, r0
 800200c:	3344      	adds	r3, #68	@ 0x44
 800200e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3344      	adds	r3, #68	@ 0x44
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d943      	bls.n	80020ae <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	3344      	adds	r3, #68	@ 0x44
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	331a      	adds	r3, #26
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d123      	bne.n	8002098 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	331b      	adds	r3, #27
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	331c      	adds	r3, #28
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	0151      	lsls	r1, r2, #5
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	440a      	add	r2, r1
 800208e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002096:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	334c      	adds	r3, #76	@ 0x4c
 80020a8:	2204      	movs	r2, #4
 80020aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80020ac:	e229      	b.n	8002502 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	334c      	adds	r3, #76	@ 0x4c
 80020be:	2202      	movs	r2, #2
 80020c0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3326      	adds	r3, #38	@ 0x26
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00b      	beq.n	80020f0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	3326      	adds	r3, #38	@ 0x26
 80020e8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	f040 8209 	bne.w	8002502 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002106:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800210e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800211c:	461a      	mov	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002122:	e1ee      	b.n	8002502 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	334d      	adds	r3, #77	@ 0x4d
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b05      	cmp	r3, #5
 8002138:	f040 80c8 	bne.w	80022cc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	334d      	adds	r3, #77	@ 0x4d
 800214c:	2202      	movs	r2, #2
 800214e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	331b      	adds	r3, #27
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	f040 81ce 	bne.w	8002504 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	3326      	adds	r3, #38	@ 0x26
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d16b      	bne.n	8002256 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	3348      	adds	r3, #72	@ 0x48
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	1c59      	adds	r1, r3, #1
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4403      	add	r3, r0
 800219e:	3348      	adds	r3, #72	@ 0x48
 80021a0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	3348      	adds	r3, #72	@ 0x48
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d943      	bls.n	8002240 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3348      	adds	r3, #72	@ 0x48
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	331b      	adds	r3, #27
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	3344      	adds	r3, #68	@ 0x44
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d809      	bhi.n	800220a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	331c      	adds	r3, #28
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	0151      	lsls	r1, r2, #5
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	440a      	add	r2, r1
 8002220:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002228:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	334c      	adds	r3, #76	@ 0x4c
 800223a:	2204      	movs	r2, #4
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	e014      	b.n	800226a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	334c      	adds	r3, #76	@ 0x4c
 8002250:	2202      	movs	r2, #2
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e009      	b.n	800226a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	334c      	adds	r3, #76	@ 0x4c
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	3326      	adds	r3, #38	@ 0x26
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00b      	beq.n	8002298 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	3326      	adds	r3, #38	@ 0x26
 8002290:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002292:	2b02      	cmp	r3, #2
 8002294:	f040 8136 	bne.w	8002504 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80022ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80022b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022c4:	461a      	mov	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e11b      	b.n	8002504 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	334d      	adds	r3, #77	@ 0x4d
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	f040 8081 	bne.w	80023e6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	334d      	adds	r3, #77	@ 0x4d
 80022f4:	2202      	movs	r2, #2
 80022f6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	331b      	adds	r3, #27
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	f040 80fa 	bne.w	8002504 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	334c      	adds	r3, #76	@ 0x4c
 8002320:	2202      	movs	r2, #2
 8002322:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4413      	add	r3, r2
 800232c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	0151      	lsls	r1, r2, #5
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	440a      	add	r2, r1
 800233a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800233e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002342:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4413      	add	r3, r2
 800234c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	0151      	lsls	r1, r2, #5
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	440a      	add	r2, r1
 800235a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800235e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002362:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	0151      	lsls	r1, r2, #5
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	440a      	add	r2, r1
 800237a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800237e:	f023 0320 	bic.w	r3, r3, #32
 8002382:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	3326      	adds	r3, #38	@ 0x26
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	3326      	adds	r3, #38	@ 0x26
 80023aa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	f040 80a9 	bne.w	8002504 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80023c8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023d0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	e08e      	b.n	8002504 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	334d      	adds	r3, #77	@ 0x4d
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d143      	bne.n	8002484 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	334d      	adds	r3, #77	@ 0x4d
 800240c:	2202      	movs	r2, #2
 800240e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	334c      	adds	r3, #76	@ 0x4c
 8002420:	2202      	movs	r2, #2
 8002422:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3326      	adds	r3, #38	@ 0x26
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	3326      	adds	r3, #38	@ 0x26
 800244a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800244c:	2b02      	cmp	r3, #2
 800244e:	d159      	bne.n	8002504 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002466:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800246e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800247c:	461a      	mov	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e03f      	b.n	8002504 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	334d      	adds	r3, #77	@ 0x4d
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b08      	cmp	r3, #8
 8002498:	d126      	bne.n	80024e8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	334d      	adds	r3, #77	@ 0x4d
 80024aa:	2202      	movs	r2, #2
 80024ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	3344      	adds	r3, #68	@ 0x44
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	1c59      	adds	r1, r3, #1
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4403      	add	r3, r0
 80024ce:	3344      	adds	r3, #68	@ 0x44
 80024d0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	334c      	adds	r3, #76	@ 0x4c
 80024e2:	2204      	movs	r2, #4
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e00d      	b.n	8002504 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	334d      	adds	r3, #77	@ 0x4d
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	f000 8100 	beq.w	8002700 <HCD_HC_IN_IRQHandler+0xcca>
 8002500:	e000      	b.n	8002504 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002502:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	334c      	adds	r3, #76	@ 0x4c
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f004 ff8c 	bl	8007438 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002520:	e0ef      	b.n	8002702 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f001 fe87 	bl	800423e <USB_ReadChInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002536:	2b40      	cmp	r3, #64	@ 0x40
 8002538:	d12f      	bne.n	800259a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002546:	461a      	mov	r2, r3
 8002548:	2340      	movs	r3, #64	@ 0x40
 800254a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	334d      	adds	r3, #77	@ 0x4d
 800255c:	2205      	movs	r2, #5
 800255e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	331a      	adds	r3, #26
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	3344      	adds	r3, #68	@ 0x44
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fbf7 	bl	8004d86 <USB_HC_Halt>
 8002598:	e0b3      	b.n	8002702 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f001 fe4b 	bl	800423e <USB_ReadChInterrupts>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	f040 80a7 	bne.w	8002702 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	3326      	adds	r3, #38	@ 0x26
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d11b      	bne.n	8002602 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3344      	adds	r3, #68	@ 0x44
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	334d      	adds	r3, #77	@ 0x4d
 80025ee:	2204      	movs	r2, #4
 80025f0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 fbc3 	bl	8004d86 <USB_HC_Halt>
 8002600:	e03f      	b.n	8002682 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	3326      	adds	r3, #38	@ 0x26
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3326      	adds	r3, #38	@ 0x26
 8002628:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800262a:	2b02      	cmp	r3, #2
 800262c:	d129      	bne.n	8002682 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	3344      	adds	r3, #68	@ 0x44
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	799b      	ldrb	r3, [r3, #6]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HCD_HC_IN_IRQHandler+0xc2a>
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	331b      	adds	r3, #27
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d110      	bne.n	8002682 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	334d      	adds	r3, #77	@ 0x4d
 8002670:	2204      	movs	r2, #4
 8002672:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f002 fb82 	bl	8004d86 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	331b      	adds	r3, #27
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d129      	bne.n	80026ec <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	331b      	adds	r3, #27
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	0151      	lsls	r1, r2, #5
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	440a      	add	r2, r1
 80026c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ca:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	0151      	lsls	r1, r2, #5
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	440a      	add	r2, r1
 80026e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026e6:	f043 0320 	orr.w	r3, r3, #32
 80026ea:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f8:	461a      	mov	r2, r3
 80026fa:	2310      	movs	r3, #16
 80026fc:	6093      	str	r3, [r2, #8]
 80026fe:	e000      	b.n	8002702 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002700:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f001 fd89 	bl	800423e <USB_ReadChInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b04      	cmp	r3, #4
 8002734:	d11b      	bne.n	800276e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002742:	461a      	mov	r2, r3
 8002744:	2304      	movs	r3, #4
 8002746:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	334d      	adds	r3, #77	@ 0x4d
 8002758:	2207      	movs	r2, #7
 800275a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f002 fb0e 	bl	8004d86 <USB_HC_Halt>
 800276a:	f000 bc6f 	b.w	800304c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f001 fd61 	bl	800423e <USB_ReadChInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b20      	cmp	r3, #32
 8002784:	f040 8082 	bne.w	800288c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002794:	461a      	mov	r2, r3
 8002796:	2320      	movs	r3, #32
 8002798:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	3319      	adds	r3, #25
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d124      	bne.n	80027fa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	3319      	adds	r3, #25
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	334c      	adds	r3, #76	@ 0x4c
 80027d4:	2202      	movs	r2, #2
 80027d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	334d      	adds	r3, #77	@ 0x4d
 80027e8:	2203      	movs	r2, #3
 80027ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 fac6 	bl	8004d86 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	331a      	adds	r3, #26
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	f040 841d 	bne.w	800304c <HCD_HC_OUT_IRQHandler+0x944>
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	331b      	adds	r3, #27
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	f040 8411 	bne.w	800304c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3326      	adds	r3, #38	@ 0x26
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d009      	beq.n	8002854 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	331b      	adds	r3, #27
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	334d      	adds	r3, #77	@ 0x4d
 8002864:	2203      	movs	r2, #3
 8002866:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f002 fa88 	bl	8004d86 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3344      	adds	r3, #68	@ 0x44
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e3df      	b.n	800304c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f001 fcd2 	bl	800423e <USB_ReadChInterrupts>
 800289a:	4603      	mov	r3, r0
 800289c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028a4:	d111      	bne.n	80028ca <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b2:	461a      	mov	r2, r3
 80028b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 fa5f 	bl	8004d86 <USB_HC_Halt>
 80028c8:	e3c0      	b.n	800304c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f001 fcb3 	bl	800423e <USB_ReadChInterrupts>
 80028d8:	4603      	mov	r3, r0
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d168      	bne.n	80029b4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3344      	adds	r3, #68	@ 0x44
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 fc9d 	bl	800423e <USB_ReadChInterrupts>
 8002904:	4603      	mov	r3, r0
 8002906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800290a:	2b40      	cmp	r3, #64	@ 0x40
 800290c:	d112      	bne.n	8002934 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3319      	adds	r3, #25
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800292e:	461a      	mov	r2, r3
 8002930:	2340      	movs	r3, #64	@ 0x40
 8002932:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	331b      	adds	r3, #27
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d019      	beq.n	800297e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	331b      	adds	r3, #27
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4413      	add	r3, r2
 8002966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	0151      	lsls	r1, r2, #5
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	440a      	add	r2, r1
 8002974:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002978:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800297c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800298a:	461a      	mov	r2, r3
 800298c:	2301      	movs	r3, #1
 800298e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	334d      	adds	r3, #77	@ 0x4d
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 f9ea 	bl	8004d86 <USB_HC_Halt>
 80029b2:	e34b      	b.n	800304c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 fc3e 	bl	800423e <USB_ReadChInterrupts>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c8:	2b40      	cmp	r3, #64	@ 0x40
 80029ca:	d139      	bne.n	8002a40 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	334d      	adds	r3, #77	@ 0x4d
 80029dc:	2205      	movs	r2, #5
 80029de:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	331a      	adds	r3, #26
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3319      	adds	r3, #25
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	3344      	adds	r3, #68	@ 0x44
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 f9ad 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2340      	movs	r3, #64	@ 0x40
 8002a3c:	6093      	str	r3, [r2, #8]
 8002a3e:	e305      	b.n	800304c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f001 fbf8 	bl	800423e <USB_ReadChInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d11a      	bne.n	8002a8e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a64:	461a      	mov	r2, r3
 8002a66:	2308      	movs	r3, #8
 8002a68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	334d      	adds	r3, #77	@ 0x4d
 8002a7a:	2206      	movs	r2, #6
 8002a7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f002 f97d 	bl	8004d86 <USB_HC_Halt>
 8002a8c:	e2de      	b.n	800304c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 fbd1 	bl	800423e <USB_ReadChInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d144      	bne.n	8002b30 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3344      	adds	r3, #68	@ 0x44
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	334d      	adds	r3, #77	@ 0x4d
 8002aca:	2204      	movs	r2, #4
 8002acc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3319      	adds	r3, #25
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d114      	bne.n	8002b0e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3318      	adds	r3, #24
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	3319      	adds	r3, #25
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 f935 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2310      	movs	r3, #16
 8002b2c:	6093      	str	r3, [r2, #8]
 8002b2e:	e28d      	b.n	800304c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 fb80 	bl	800423e <USB_ReadChInterrupts>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b44:	2b80      	cmp	r3, #128	@ 0x80
 8002b46:	d169      	bne.n	8002c1c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	799b      	ldrb	r3, [r3, #6]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d111      	bne.n	8002b74 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	334d      	adds	r3, #77	@ 0x4d
 8002b60:	2207      	movs	r2, #7
 8002b62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f002 f90a 	bl	8004d86 <USB_HC_Halt>
 8002b72:	e049      	b.n	8002c08 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	3344      	adds	r3, #68	@ 0x44
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	1c59      	adds	r1, r3, #1
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4403      	add	r3, r0
 8002b94:	3344      	adds	r3, #68	@ 0x44
 8002b96:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3344      	adds	r3, #68	@ 0x44
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d922      	bls.n	8002bf4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	3344      	adds	r3, #68	@ 0x44
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	334c      	adds	r3, #76	@ 0x4c
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	334c      	adds	r3, #76	@ 0x4c
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	4619      	mov	r1, r3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f004 fc23 	bl	8007438 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bf2:	e009      	b.n	8002c08 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	334c      	adds	r3, #76	@ 0x4c
 8002c04:	2202      	movs	r2, #2
 8002c06:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c14:	461a      	mov	r2, r3
 8002c16:	2380      	movs	r3, #128	@ 0x80
 8002c18:	6093      	str	r3, [r2, #8]
 8002c1a:	e217      	b.n	800304c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 fb0a 	bl	800423e <USB_ReadChInterrupts>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c34:	d11b      	bne.n	8002c6e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	334d      	adds	r3, #77	@ 0x4d
 8002c46:	2209      	movs	r2, #9
 8002c48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f002 f897 	bl	8004d86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c64:	461a      	mov	r2, r3
 8002c66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c6a:	6093      	str	r3, [r2, #8]
 8002c6c:	e1ee      	b.n	800304c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 fae1 	bl	800423e <USB_ReadChInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	f040 81df 	bne.w	8003046 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	2302      	movs	r3, #2
 8002c98:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	334d      	adds	r3, #77	@ 0x4d
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	f040 8093 	bne.w	8002dd8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	334d      	adds	r3, #77	@ 0x4d
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	334c      	adds	r3, #76	@ 0x4c
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3326      	adds	r3, #38	@ 0x26
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d00b      	beq.n	8002d08 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3326      	adds	r3, #38	@ 0x26
 8002d00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	f040 8190 	bne.w	8003028 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	799b      	ldrb	r3, [r3, #6]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d115      	bne.n	8002d3c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	333d      	adds	r3, #61	@ 0x3d
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	f083 0301 	eor.w	r3, r3, #1
 8002d28:	b2d8      	uxtb	r0, r3
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	333d      	adds	r3, #61	@ 0x3d
 8002d38:	4602      	mov	r2, r0
 8002d3a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	799b      	ldrb	r3, [r3, #6]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	f040 8171 	bne.w	8003028 <HCD_HC_OUT_IRQHandler+0x920>
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3334      	adds	r3, #52	@ 0x34
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8165 	beq.w	8003028 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3334      	adds	r3, #52	@ 0x34
 8002d6e:	6819      	ldr	r1, [r3, #0]
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4403      	add	r3, r0
 8002d7e:	3328      	adds	r3, #40	@ 0x28
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	440b      	add	r3, r1
 8002d84:	1e59      	subs	r1, r3, #1
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4403      	add	r3, r0
 8002d94:	3328      	adds	r3, #40	@ 0x28
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d9c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 813f 	beq.w	8003028 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	333d      	adds	r3, #61	@ 0x3d
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	f083 0301 	eor.w	r3, r3, #1
 8002dc2:	b2d8      	uxtb	r0, r3
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	333d      	adds	r3, #61	@ 0x3d
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e127      	b.n	8003028 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	334d      	adds	r3, #77	@ 0x4d
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d120      	bne.n	8002e30 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	334d      	adds	r3, #77	@ 0x4d
 8002dfe:	2202      	movs	r2, #2
 8002e00:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	331b      	adds	r3, #27
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	f040 8107 	bne.w	8003028 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	334c      	adds	r3, #76	@ 0x4c
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e0fb      	b.n	8003028 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	334d      	adds	r3, #77	@ 0x4d
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d13a      	bne.n	8002ebc <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	334d      	adds	r3, #77	@ 0x4d
 8002e56:	2202      	movs	r2, #2
 8002e58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	334c      	adds	r3, #76	@ 0x4c
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	331b      	adds	r3, #27
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	f040 80d1 	bne.w	8003028 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	331b      	adds	r3, #27
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	0151      	lsls	r1, r2, #5
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	440a      	add	r2, r1
 8002eb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb8:	6053      	str	r3, [r2, #4]
 8002eba:	e0b5      	b.n	8003028 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	334d      	adds	r3, #77	@ 0x4d
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d114      	bne.n	8002efc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	334d      	adds	r3, #77	@ 0x4d
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	334c      	adds	r3, #76	@ 0x4c
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e095      	b.n	8003028 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	334d      	adds	r3, #77	@ 0x4d
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d114      	bne.n	8002f3c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	334d      	adds	r3, #77	@ 0x4d
 8002f22:	2202      	movs	r2, #2
 8002f24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	334c      	adds	r3, #76	@ 0x4c
 8002f36:	2205      	movs	r2, #5
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e075      	b.n	8003028 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	334d      	adds	r3, #77	@ 0x4d
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b07      	cmp	r3, #7
 8002f50:	d00a      	beq.n	8002f68 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	334d      	adds	r3, #77	@ 0x4d
 8002f62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f64:	2b09      	cmp	r3, #9
 8002f66:	d170      	bne.n	800304a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	334d      	adds	r3, #77	@ 0x4d
 8002f78:	2202      	movs	r2, #2
 8002f7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	3344      	adds	r3, #68	@ 0x44
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1c59      	adds	r1, r3, #1
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4403      	add	r3, r0
 8002f9c:	3344      	adds	r3, #68	@ 0x44
 8002f9e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3344      	adds	r3, #68	@ 0x44
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d914      	bls.n	8002fe0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3344      	adds	r3, #68	@ 0x44
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	334c      	adds	r3, #76	@ 0x4c
 8002fda:	2204      	movs	r2, #4
 8002fdc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fde:	e022      	b.n	8003026 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334c      	adds	r3, #76	@ 0x4c
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800300a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003012:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003026:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	334c      	adds	r3, #76	@ 0x4c
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f004 f9fa 	bl	8007438 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003044:	e002      	b.n	800304c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800304a:	bf00      	nop
  }
}
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b08a      	sub	sp, #40	@ 0x28
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	0c5b      	lsrs	r3, r3, #17
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003086:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d004      	beq.n	8003098 <HCD_RXQLVL_IRQHandler+0x46>
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b05      	cmp	r3, #5
 8003092:	f000 80b6 	beq.w	8003202 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003096:	e0b7      	b.n	8003208 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80b3 	beq.w	8003206 <HCD_RXQLVL_IRQHandler+0x1b4>
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	332c      	adds	r3, #44	@ 0x2c
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80a7 	beq.w	8003206 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	3338      	adds	r3, #56	@ 0x38
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	18d1      	adds	r1, r2, r3
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4403      	add	r3, r0
 80030dc:	3334      	adds	r3, #52	@ 0x34
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4299      	cmp	r1, r3
 80030e2:	f200 8083 	bhi.w	80031ec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	332c      	adds	r3, #44	@ 0x2c
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	b292      	uxth	r2, r2
 8003100:	4619      	mov	r1, r3
 8003102:	f001 f831 	bl	8004168 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	332c      	adds	r3, #44	@ 0x2c
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	18d1      	adds	r1, r2, r3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4403      	add	r3, r0
 800312a:	332c      	adds	r3, #44	@ 0x2c
 800312c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3338      	adds	r3, #56	@ 0x38
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	18d1      	adds	r1, r2, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4403      	add	r3, r0
 8003152:	3338      	adds	r3, #56	@ 0x38
 8003154:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	4413      	add	r3, r2
 800315e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	0cdb      	lsrs	r3, r3, #19
 8003166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800316a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3328      	adds	r3, #40	@ 0x28
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4293      	cmp	r3, r2
 8003184:	d13f      	bne.n	8003206 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d03c      	beq.n	8003206 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	4413      	add	r3, r2
 8003194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b8:	461a      	mov	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	333c      	adds	r3, #60	@ 0x3c
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	f083 0301 	eor.w	r3, r3, #1
 80031d4:	b2d8      	uxtb	r0, r3
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	333c      	adds	r3, #60	@ 0x3c
 80031e6:	4602      	mov	r2, r0
 80031e8:	701a      	strb	r2, [r3, #0]
      break;
 80031ea:	e00c      	b.n	8003206 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	334c      	adds	r3, #76	@ 0x4c
 80031fc:	2204      	movs	r2, #4
 80031fe:	701a      	strb	r2, [r3, #0]
      break;
 8003200:	e001      	b.n	8003206 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003202:	bf00      	nop
 8003204:	e000      	b.n	8003208 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003206:	bf00      	nop
  }
}
 8003208:	bf00      	nop
 800320a:	3728      	adds	r7, #40	@ 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800323c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b02      	cmp	r3, #2
 8003246:	d10b      	bne.n	8003260 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f004 f8d4 	bl	8007400 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f043 0302 	orr.w	r3, r3, #2
 800325e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b08      	cmp	r3, #8
 8003268:	d132      	bne.n	80032d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f043 0308 	orr.w	r3, r3, #8
 8003270:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b04      	cmp	r3, #4
 800327a:	d126      	bne.n	80032ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7a5b      	ldrb	r3, [r3, #9]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d113      	bne.n	80032ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800328a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800328e:	d106      	bne.n	800329e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2102      	movs	r1, #2
 8003296:	4618      	mov	r0, r3
 8003298:	f001 f8f6 	bl	8004488 <USB_InitFSLSPClkSel>
 800329c:	e011      	b.n	80032c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2101      	movs	r1, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 f8ef 	bl	8004488 <USB_InitFSLSPClkSel>
 80032aa:	e00a      	b.n	80032c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	79db      	ldrb	r3, [r3, #7]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d106      	bne.n	80032c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032ba:	461a      	mov	r2, r3
 80032bc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80032c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f004 f8c6 	bl	8007454 <HAL_HCD_PortEnabled_Callback>
 80032c8:	e002      	b.n	80032d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f004 f8d0 	bl	8007470 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d103      	bne.n	80032e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f043 0320 	orr.w	r3, r3, #32
 80032e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80032e8:	461a      	mov	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	6013      	str	r3, [r2, #0]
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e12b      	b.n	8003562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd fa7e 	bl	8000820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2224      	movs	r2, #36	@ 0x24
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800334a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800335a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800335c:	f000 fd80 	bl	8003e60 <HAL_RCC_GetPCLK1Freq>
 8003360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4a81      	ldr	r2, [pc, #516]	@ (800356c <HAL_I2C_Init+0x274>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d807      	bhi.n	800337c <HAL_I2C_Init+0x84>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a80      	ldr	r2, [pc, #512]	@ (8003570 <HAL_I2C_Init+0x278>)
 8003370:	4293      	cmp	r3, r2
 8003372:	bf94      	ite	ls
 8003374:	2301      	movls	r3, #1
 8003376:	2300      	movhi	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e006      	b.n	800338a <HAL_I2C_Init+0x92>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a7d      	ldr	r2, [pc, #500]	@ (8003574 <HAL_I2C_Init+0x27c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	bf94      	ite	ls
 8003384:	2301      	movls	r3, #1
 8003386:	2300      	movhi	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e0e7      	b.n	8003562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a78      	ldr	r2, [pc, #480]	@ (8003578 <HAL_I2C_Init+0x280>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0c9b      	lsrs	r3, r3, #18
 800339c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a6a      	ldr	r2, [pc, #424]	@ (800356c <HAL_I2C_Init+0x274>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d802      	bhi.n	80033cc <HAL_I2C_Init+0xd4>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3301      	adds	r3, #1
 80033ca:	e009      	b.n	80033e0 <HAL_I2C_Init+0xe8>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	4a69      	ldr	r2, [pc, #420]	@ (800357c <HAL_I2C_Init+0x284>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	3301      	adds	r3, #1
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	495c      	ldr	r1, [pc, #368]	@ (800356c <HAL_I2C_Init+0x274>)
 80033fc:	428b      	cmp	r3, r1
 80033fe:	d819      	bhi.n	8003434 <HAL_I2C_Init+0x13c>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1e59      	subs	r1, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fbb1 f3f3 	udiv	r3, r1, r3
 800340e:	1c59      	adds	r1, r3, #1
 8003410:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003414:	400b      	ands	r3, r1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_I2C_Init+0x138>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1e59      	subs	r1, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fbb1 f3f3 	udiv	r3, r1, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342e:	e051      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 8003430:	2304      	movs	r3, #4
 8003432:	e04f      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d111      	bne.n	8003460 <HAL_I2C_Init+0x168>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1e58      	subs	r0, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	440b      	add	r3, r1
 800344a:	fbb0 f3f3 	udiv	r3, r0, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e012      	b.n	8003486 <HAL_I2C_Init+0x18e>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1e58      	subs	r0, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	0099      	lsls	r1, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	fbb0 f3f3 	udiv	r3, r0, r3
 8003476:	3301      	adds	r3, #1
 8003478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Init+0x196>
 800348a:	2301      	movs	r3, #1
 800348c:	e022      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10e      	bne.n	80034b4 <HAL_I2C_Init+0x1bc>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e58      	subs	r0, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	440b      	add	r3, r1
 80034a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034b2:	e00f      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e58      	subs	r0, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	0099      	lsls	r1, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	6809      	ldr	r1, [r1, #0]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003502:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6911      	ldr	r1, [r2, #16]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68d2      	ldr	r2, [r2, #12]
 800350e:	4311      	orrs	r1, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	430b      	orrs	r3, r1
 8003516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	000186a0 	.word	0x000186a0
 8003570:	001e847f 	.word	0x001e847f
 8003574:	003d08ff 	.word	0x003d08ff
 8003578:	431bde83 	.word	0x431bde83
 800357c:	10624dd3 	.word	0x10624dd3

08003580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e267      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d075      	beq.n	800368a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359e:	4b88      	ldr	r3, [pc, #544]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d00c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4b85      	ldr	r3, [pc, #532]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d112      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4b82      	ldr	r3, [pc, #520]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035c2:	d10b      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b7e      	ldr	r3, [pc, #504]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05b      	beq.n	8003688 <HAL_RCC_OscConfig+0x108>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d157      	bne.n	8003688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e242      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x74>
 80035e6:	4b76      	ldr	r3, [pc, #472]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a75      	ldr	r2, [pc, #468]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e01d      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x98>
 80035fe:	4b70      	ldr	r3, [pc, #448]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a6f      	ldr	r2, [pc, #444]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b6d      	ldr	r3, [pc, #436]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6c      	ldr	r2, [pc, #432]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 8003618:	4b69      	ldr	r3, [pc, #420]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a68      	ldr	r2, [pc, #416]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800361e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b66      	ldr	r3, [pc, #408]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a65      	ldr	r2, [pc, #404]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800362a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800362e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fd fa4c 	bl	8000ad4 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003640:	f7fd fa48 	bl	8000ad4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	@ 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e207      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b5b      	ldr	r3, [pc, #364]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0xc0>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fd fa38 	bl	8000ad4 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7fd fa34 	bl	8000ad4 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	@ 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1f3      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	4b51      	ldr	r3, [pc, #324]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0xe8>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d063      	beq.n	800375e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003696:	4b4a      	ldr	r3, [pc, #296]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b47      	ldr	r3, [pc, #284]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d11c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b44      	ldr	r3, [pc, #272]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d116      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	4b41      	ldr	r3, [pc, #260]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e1c7      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d2:	4b3b      	ldr	r3, [pc, #236]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4937      	ldr	r1, [pc, #220]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	e03a      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f0:	4b34      	ldr	r3, [pc, #208]	@ (80037c4 <HAL_RCC_OscConfig+0x244>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fd f9ed 	bl	8000ad4 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fe:	f7fd f9e9 	bl	8000ad4 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e1a8      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003710:	4b2b      	ldr	r3, [pc, #172]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4925      	ldr	r1, [pc, #148]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]
 8003730:	e015      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003732:	4b24      	ldr	r3, [pc, #144]	@ (80037c4 <HAL_RCC_OscConfig+0x244>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fd f9cc 	bl	8000ad4 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003740:	f7fd f9c8 	bl	8000ad4 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e187      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d036      	beq.n	80037d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003772:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <HAL_RCC_OscConfig+0x248>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fd f9ac 	bl	8000ad4 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003780:	f7fd f9a8 	bl	8000ad4 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e167      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003792:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_RCC_OscConfig+0x240>)
 8003794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x200>
 800379e:	e01b      	b.n	80037d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a0:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <HAL_RCC_OscConfig+0x248>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a6:	f7fd f995 	bl	8000ad4 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	e00e      	b.n	80037cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ae:	f7fd f991 	bl	8000ad4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d907      	bls.n	80037cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e150      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
 80037c0:	40023800 	.word	0x40023800
 80037c4:	42470000 	.word	0x42470000
 80037c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b88      	ldr	r3, [pc, #544]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ea      	bne.n	80037ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8097 	beq.w	8003914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b81      	ldr	r3, [pc, #516]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	4b7d      	ldr	r3, [pc, #500]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	4a7c      	ldr	r2, [pc, #496]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	@ 0x40
 8003806:	4b7a      	ldr	r3, [pc, #488]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b77      	ldr	r3, [pc, #476]	@ (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d118      	bne.n	8003854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b74      	ldr	r3, [pc, #464]	@ (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a73      	ldr	r2, [pc, #460]	@ (80039f4 <HAL_RCC_OscConfig+0x474>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7fd f951 	bl	8000ad4 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003836:	f7fd f94d 	bl	8000ad4 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e10c      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003848:	4b6a      	ldr	r3, [pc, #424]	@ (80039f4 <HAL_RCC_OscConfig+0x474>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d106      	bne.n	800386a <HAL_RCC_OscConfig+0x2ea>
 800385c:	4b64      	ldr	r3, [pc, #400]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003860:	4a63      	ldr	r2, [pc, #396]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6713      	str	r3, [r2, #112]	@ 0x70
 8003868:	e01c      	b.n	80038a4 <HAL_RCC_OscConfig+0x324>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d10c      	bne.n	800388c <HAL_RCC_OscConfig+0x30c>
 8003872:	4b5f      	ldr	r3, [pc, #380]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003876:	4a5e      	ldr	r2, [pc, #376]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003878:	f043 0304 	orr.w	r3, r3, #4
 800387c:	6713      	str	r3, [r2, #112]	@ 0x70
 800387e:	4b5c      	ldr	r3, [pc, #368]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	4a5b      	ldr	r2, [pc, #364]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6713      	str	r3, [r2, #112]	@ 0x70
 800388a:	e00b      	b.n	80038a4 <HAL_RCC_OscConfig+0x324>
 800388c:	4b58      	ldr	r3, [pc, #352]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003890:	4a57      	ldr	r2, [pc, #348]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	6713      	str	r3, [r2, #112]	@ 0x70
 8003898:	4b55      	ldr	r3, [pc, #340]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389c:	4a54      	ldr	r2, [pc, #336]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 800389e:	f023 0304 	bic.w	r3, r3, #4
 80038a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d015      	beq.n	80038d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ac:	f7fd f912 	bl	8000ad4 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fd f90e 	bl	8000ad4 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e0cb      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ca:	4b49      	ldr	r3, [pc, #292]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0ee      	beq.n	80038b4 <HAL_RCC_OscConfig+0x334>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d8:	f7fd f8fc 	bl	8000ad4 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e0:	f7fd f8f8 	bl	8000ad4 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e0b5      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f6:	4b3e      	ldr	r3, [pc, #248]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ee      	bne.n	80038e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d105      	bne.n	8003914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003908:	4b39      	ldr	r3, [pc, #228]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	4a38      	ldr	r2, [pc, #224]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 800390e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003912:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 80a1 	beq.w	8003a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800391e:	4b34      	ldr	r3, [pc, #208]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b08      	cmp	r3, #8
 8003928:	d05c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d141      	bne.n	80039b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fd f8cc 	bl	8000ad4 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003940:	f7fd f8c8 	bl	8000ad4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e087      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	4b27      	ldr	r3, [pc, #156]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	3b01      	subs	r3, #1
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	491b      	ldr	r1, [pc, #108]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003988:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7fd f8a1 	bl	8000ad4 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003996:	f7fd f89d 	bl	8000ad4 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e05c      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a8:	4b11      	ldr	r3, [pc, #68]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x416>
 80039b4:	e054      	b.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b6:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <HAL_RCC_OscConfig+0x478>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fd f88a 	bl	8000ad4 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fd f886 	bl	8000ad4 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e045      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <HAL_RCC_OscConfig+0x470>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x444>
 80039e2:	e03d      	b.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d107      	bne.n	80039fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e038      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40007000 	.word	0x40007000
 80039f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039fc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <HAL_RCC_OscConfig+0x4ec>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d028      	beq.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d121      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d11a      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d111      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	3b01      	subs	r3, #1
 8003a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0cc      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b68      	ldr	r3, [pc, #416]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d90c      	bls.n	8003aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b65      	ldr	r3, [pc, #404]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b63      	ldr	r3, [pc, #396]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0b8      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b59      	ldr	r3, [pc, #356]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a58      	ldr	r2, [pc, #352]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003adc:	4b53      	ldr	r3, [pc, #332]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a52      	ldr	r2, [pc, #328]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b50      	ldr	r3, [pc, #320]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	494d      	ldr	r1, [pc, #308]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d044      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b47      	ldr	r3, [pc, #284]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d119      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e07f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e067      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4e:	4b37      	ldr	r3, [pc, #220]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4934      	ldr	r1, [pc, #208]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b60:	f7fc ffb8 	bl	8000ad4 <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7fc ffb4 	bl	8000ad4 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e04f      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 020c 	and.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1eb      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b90:	4b25      	ldr	r3, [pc, #148]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d20c      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b22      	ldr	r3, [pc, #136]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	4b20      	ldr	r3, [pc, #128]	@ (8003c28 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e032      	b.n	8003c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc4:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4916      	ldr	r1, [pc, #88]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be2:	4b12      	ldr	r3, [pc, #72]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	490e      	ldr	r1, [pc, #56]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bf6:	f000 f821 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	490a      	ldr	r1, [pc, #40]	@ (8003c30 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	5ccb      	ldrb	r3, [r1, r3]
 8003c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0e:	4a09      	ldr	r2, [pc, #36]	@ (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c12:	4b09      	ldr	r3, [pc, #36]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fc ff18 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	08007ae4 	.word	0x08007ae4
 8003c34:	20000004 	.word	0x20000004
 8003c38:	20000008 	.word	0x20000008

08003c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c40:	b094      	sub	sp, #80	@ 0x50
 8003c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c48:	2300      	movs	r3, #0
 8003c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c54:	4b79      	ldr	r3, [pc, #484]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d00d      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x40>
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	f200 80e1 	bhi.w	8003e28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x34>
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c6e:	e0db      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4b73      	ldr	r3, [pc, #460]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c72:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003c74:	e0db      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c76:	4b73      	ldr	r3, [pc, #460]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c7a:	e0d8      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c84:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c86:	4b6d      	ldr	r3, [pc, #436]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d063      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b6a      	ldr	r3, [pc, #424]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	2200      	movs	r2, #0
 8003c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003caa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cae:	4622      	mov	r2, r4
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	0159      	lsls	r1, r3, #5
 8003cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc0:	0150      	lsls	r0, r2, #5
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	1a51      	subs	r1, r2, r1
 8003cca:	6139      	str	r1, [r7, #16]
 8003ccc:	4629      	mov	r1, r5
 8003cce:	eb63 0301 	sbc.w	r3, r3, r1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	018b      	lsls	r3, r1, #6
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cea:	4651      	mov	r1, sl
 8003cec:	018a      	lsls	r2, r1, #6
 8003cee:	4651      	mov	r1, sl
 8003cf0:	ebb2 0801 	subs.w	r8, r2, r1
 8003cf4:	4659      	mov	r1, fp
 8003cf6:	eb63 0901 	sbc.w	r9, r3, r1
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d0e:	4690      	mov	r8, r2
 8003d10:	4699      	mov	r9, r3
 8003d12:	4623      	mov	r3, r4
 8003d14:	eb18 0303 	adds.w	r3, r8, r3
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	462b      	mov	r3, r5
 8003d1c:	eb49 0303 	adc.w	r3, r9, r3
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d2e:	4629      	mov	r1, r5
 8003d30:	024b      	lsls	r3, r1, #9
 8003d32:	4621      	mov	r1, r4
 8003d34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d38:	4621      	mov	r1, r4
 8003d3a:	024a      	lsls	r2, r1, #9
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d42:	2200      	movs	r2, #0
 8003d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d4c:	f7fc fa3c 	bl	80001c8 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4613      	mov	r3, r2
 8003d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d58:	e058      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5a:	4b38      	ldr	r3, [pc, #224]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	099b      	lsrs	r3, r3, #6
 8003d60:	2200      	movs	r2, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	4611      	mov	r1, r2
 8003d66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d6a:	623b      	str	r3, [r7, #32]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	f04f 0000 	mov.w	r0, #0
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	0159      	lsls	r1, r3, #5
 8003d82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d86:	0150      	lsls	r0, r2, #5
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d92:	4649      	mov	r1, r9
 8003d94:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003da4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003da8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dac:	ebb2 040a 	subs.w	r4, r2, sl
 8003db0:	eb63 050b 	sbc.w	r5, r3, fp
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	00eb      	lsls	r3, r5, #3
 8003dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dc2:	00e2      	lsls	r2, r4, #3
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	461d      	mov	r5, r3
 8003dc8:	4643      	mov	r3, r8
 8003dca:	18e3      	adds	r3, r4, r3
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	464b      	mov	r3, r9
 8003dd0:	eb45 0303 	adc.w	r3, r5, r3
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003de2:	4629      	mov	r1, r5
 8003de4:	028b      	lsls	r3, r1, #10
 8003de6:	4621      	mov	r1, r4
 8003de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dec:	4621      	mov	r1, r4
 8003dee:	028a      	lsls	r2, r1, #10
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003df6:	2200      	movs	r2, #0
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	61fa      	str	r2, [r7, #28]
 8003dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e00:	f7fc f9e2 	bl	80001c8 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4613      	mov	r3, r2
 8003e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	3301      	adds	r3, #1
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003e1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e26:	e002      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e28:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3750      	adds	r7, #80	@ 0x50
 8003e34:	46bd      	mov	sp, r7
 8003e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	00f42400 	.word	0x00f42400
 8003e44:	007a1200 	.word	0x007a1200

08003e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e4c:	4b03      	ldr	r3, [pc, #12]	@ (8003e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	20000004 	.word	0x20000004

08003e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e64:	f7ff fff0 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0a9b      	lsrs	r3, r3, #10
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4903      	ldr	r1, [pc, #12]	@ (8003e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40023800 	.word	0x40023800
 8003e84:	08007af4 	.word	0x08007af4

08003e88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e88:	b084      	sub	sp, #16
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	f107 001c 	add.w	r0, r7, #28
 8003e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d123      	bne.n	8003eea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003eca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d105      	bne.n	8003ede <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f9dc 	bl	800429c <USB_CoreReset>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	73fb      	strb	r3, [r7, #15]
 8003ee8:	e01b      	b.n	8003f22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f9d0 	bl	800429c <USB_CoreReset>
 8003efc:	4603      	mov	r3, r0
 8003efe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d106      	bne.n	8003f16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f14:	e005      	b.n	8003f22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f22:	7fbb      	ldrb	r3, [r7, #30]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d10b      	bne.n	8003f40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f043 0206 	orr.w	r2, r3, #6
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f043 0220 	orr.w	r2, r3, #32
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f4c:	b004      	add	sp, #16
 8003f4e:	4770      	bx	lr

08003f50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f043 0201 	orr.w	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f023 0201 	bic.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d115      	bne.n	8003fe2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003fc2:	200a      	movs	r0, #10
 8003fc4:	f7fc fd92 	bl	8000aec <HAL_Delay>
      ms += 10U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	330a      	adds	r3, #10
 8003fcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f956 	bl	8004280 <USB_GetMode>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d01e      	beq.n	8004018 <USB_SetCurrentMode+0x84>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2bc7      	cmp	r3, #199	@ 0xc7
 8003fde:	d9f0      	bls.n	8003fc2 <USB_SetCurrentMode+0x2e>
 8003fe0:	e01a      	b.n	8004018 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d115      	bne.n	8004014 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ff4:	200a      	movs	r0, #10
 8003ff6:	f7fc fd79 	bl	8000aec <HAL_Delay>
      ms += 10U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	330a      	adds	r3, #10
 8003ffe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f93d 	bl	8004280 <USB_GetMode>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <USB_SetCurrentMode+0x84>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004010:	d9f0      	bls.n	8003ff4 <USB_SetCurrentMode+0x60>
 8004012:	e001      	b.n	8004018 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e005      	b.n	8004024 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2bc8      	cmp	r3, #200	@ 0xc8
 800401c:	d101      	bne.n	8004022 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3301      	adds	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004046:	d901      	bls.n	800404c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e01b      	b.n	8004084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	daf2      	bge.n	800403a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	019b      	lsls	r3, r3, #6
 800405c:	f043 0220 	orr.w	r2, r3, #32
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3301      	adds	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004070:	d901      	bls.n	8004076 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e006      	b.n	8004084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b20      	cmp	r3, #32
 8004080:	d0f0      	beq.n	8004064 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3301      	adds	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040a8:	d901      	bls.n	80040ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e018      	b.n	80040e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	daf2      	bge.n	800409c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2210      	movs	r2, #16
 80040be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040cc:	d901      	bls.n	80040d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e006      	b.n	80040e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d0f0      	beq.n	80040c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b089      	sub	sp, #36	@ 0x24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	4611      	mov	r1, r2
 80040f8:	461a      	mov	r2, r3
 80040fa:	460b      	mov	r3, r1
 80040fc:	71fb      	strb	r3, [r7, #7]
 80040fe:	4613      	mov	r3, r2
 8004100:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800410a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	d123      	bne.n	800415a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004112:	88bb      	ldrh	r3, [r7, #4]
 8004114:	3303      	adds	r3, #3
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	e018      	b.n	8004152 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	031a      	lsls	r2, r3, #12
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4413      	add	r3, r2
 8004128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800412c:	461a      	mov	r2, r3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	3301      	adds	r3, #1
 8004138:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	3301      	adds	r3, #1
 800413e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	3301      	adds	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3301      	adds	r3, #1
 800414a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	3301      	adds	r3, #1
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	429a      	cmp	r2, r3
 8004158:	d3e2      	bcc.n	8004120 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3724      	adds	r7, #36	@ 0x24
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004168:	b480      	push	{r7}
 800416a:	b08b      	sub	sp, #44	@ 0x2c
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	b29b      	uxth	r3, r3
 8004184:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800418e:	2300      	movs	r3, #0
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	e014      	b.n	80041be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	601a      	str	r2, [r3, #0]
    pDest++;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	3301      	adds	r3, #1
 80041a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	3301      	adds	r3, #1
 80041aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80041ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ae:	3301      	adds	r3, #1
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	3301      	adds	r3, #1
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	3301      	adds	r3, #1
 80041bc:	623b      	str	r3, [r7, #32]
 80041be:	6a3a      	ldr	r2, [r7, #32]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d3e6      	bcc.n	8004194 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80041c6:	8bfb      	ldrh	r3, [r7, #30]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01e      	beq.n	800420a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041d6:	461a      	mov	r2, r3
 80041d8:	f107 0310 	add.w	r3, r7, #16
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	701a      	strb	r2, [r3, #0]
      i++;
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	3301      	adds	r3, #1
 80041f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	3301      	adds	r3, #1
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80041fe:	8bfb      	ldrh	r3, [r7, #30]
 8004200:	3b01      	subs	r3, #1
 8004202:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004204:	8bfb      	ldrh	r3, [r7, #30]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1ea      	bne.n	80041e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800420c:	4618      	mov	r0, r3
 800420e:	372c      	adds	r7, #44	@ 0x2c
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4013      	ands	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004230:	68fb      	ldr	r3, [r7, #12]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	460b      	mov	r3, r1
 8004248:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4413      	add	r3, r2
 8004256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004272:	68bb      	ldr	r3, [r7, #8]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0301 	and.w	r3, r3, #1
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042b4:	d901      	bls.n	80042ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e01b      	b.n	80042f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	daf2      	bge.n	80042a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f043 0201 	orr.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3301      	adds	r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80042de:	d901      	bls.n	80042e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e006      	b.n	80042f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d0f0      	beq.n	80042d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004300:	b084      	sub	sp, #16
 8004302:	b580      	push	{r7, lr}
 8004304:	b086      	sub	sp, #24
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800430e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004320:	461a      	mov	r2, r3
 8004322:	2300      	movs	r3, #0
 8004324:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004336:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004342:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d119      	bne.n	800438a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004356:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800435a:	2b01      	cmp	r3, #1
 800435c:	d10a      	bne.n	8004374 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800436c:	f043 0304 	orr.w	r3, r3, #4
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e014      	b.n	800439e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004382:	f023 0304 	bic.w	r3, r3, #4
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	e009      	b.n	800439e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004398:	f023 0304 	bic.w	r3, r3, #4
 800439c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800439e:	2110      	movs	r1, #16
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff fe43 	bl	800402c <USB_FlushTxFifo>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff fe6d 	bl	8004090 <USB_FlushRxFifo>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	e015      	b.n	80043f2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043d2:	461a      	mov	r2, r3
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
 80043d8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043e6:	461a      	mov	r2, r3
 80043e8:	2300      	movs	r3, #0
 80043ea:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	3301      	adds	r3, #1
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80043f6:	461a      	mov	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d3e3      	bcc.n	80043c6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f04f 32ff 	mov.w	r2, #4294967295
 800440a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a18      	ldr	r2, [pc, #96]	@ (8004470 <USB_HostInit+0x170>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d10b      	bne.n	800442c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800441a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a15      	ldr	r2, [pc, #84]	@ (8004474 <USB_HostInit+0x174>)
 8004420:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a14      	ldr	r2, [pc, #80]	@ (8004478 <USB_HostInit+0x178>)
 8004426:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800442a:	e009      	b.n	8004440 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2280      	movs	r2, #128	@ 0x80
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a11      	ldr	r2, [pc, #68]	@ (800447c <USB_HostInit+0x17c>)
 8004436:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a11      	ldr	r2, [pc, #68]	@ (8004480 <USB_HostInit+0x180>)
 800443c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004440:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004444:	2b00      	cmp	r3, #0
 8004446:	d105      	bne.n	8004454 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f043 0210 	orr.w	r2, r3, #16
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	4b0a      	ldr	r3, [pc, #40]	@ (8004484 <USB_HostInit+0x184>)
 800445a:	4313      	orrs	r3, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004460:	7dfb      	ldrb	r3, [r7, #23]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800446c:	b004      	add	sp, #16
 800446e:	4770      	bx	lr
 8004470:	40040000 	.word	0x40040000
 8004474:	01000200 	.word	0x01000200
 8004478:	00e00300 	.word	0x00e00300
 800447c:	00600080 	.word	0x00600080
 8004480:	004000e0 	.word	0x004000e0
 8004484:	a3200008 	.word	0xa3200008

08004488 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d107      	bne.n	80044da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044d0:	461a      	mov	r2, r3
 80044d2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80044d6:	6053      	str	r3, [r2, #4]
 80044d8:	e00c      	b.n	80044f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d107      	bne.n	80044f0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044e6:	461a      	mov	r2, r3
 80044e8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80044ec:	6053      	str	r3, [r2, #4]
 80044ee:	e001      	b.n	80044f4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004522:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800452c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004530:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004532:	2064      	movs	r0, #100	@ 0x64
 8004534:	f7fc fada 	bl	8000aec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004544:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004546:	200a      	movs	r0, #10
 8004548:	f7fc fad0 	bl	8000aec <HAL_Delay>

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	460b      	mov	r3, r1
 8004560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800457a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <USB_DriveVbus+0x44>
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d106      	bne.n	800459a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004594:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004598:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a4:	d109      	bne.n	80045ba <USB_DriveVbus+0x64>
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80045b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045b8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	0c5b      	lsrs	r3, r3, #17
 80045e6:	f003 0303 	and.w	r3, r3, #3
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	b29b      	uxth	r3, r3
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	4608      	mov	r0, r1
 8004622:	4611      	mov	r1, r2
 8004624:	461a      	mov	r2, r3
 8004626:	4603      	mov	r3, r0
 8004628:	70fb      	strb	r3, [r7, #3]
 800462a:	460b      	mov	r3, r1
 800462c:	70bb      	strb	r3, [r7, #2]
 800462e:	4613      	mov	r3, r2
 8004630:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004646:	461a      	mov	r2, r3
 8004648:	f04f 33ff 	mov.w	r3, #4294967295
 800464c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800464e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004652:	2b03      	cmp	r3, #3
 8004654:	d87c      	bhi.n	8004750 <USB_HC_Init+0x138>
 8004656:	a201      	add	r2, pc, #4	@ (adr r2, 800465c <USB_HC_Init+0x44>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	0800466d 	.word	0x0800466d
 8004660:	08004713 	.word	0x08004713
 8004664:	0800466d 	.word	0x0800466d
 8004668:	080046d5 	.word	0x080046d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004678:	461a      	mov	r2, r3
 800467a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800467e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004680:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004684:	2b00      	cmp	r3, #0
 8004686:	da10      	bge.n	80046aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4413      	add	r3, r2
 8004690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	440a      	add	r2, r1
 800469e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046a6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80046a8:	e055      	b.n	8004756 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a6f      	ldr	r2, [pc, #444]	@ (800486c <USB_HC_Init+0x254>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d151      	bne.n	8004756 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80046b2:	78fb      	ldrb	r3, [r7, #3]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	0151      	lsls	r1, r2, #5
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	440a      	add	r2, r1
 80046c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80046d0:	60d3      	str	r3, [r2, #12]
      break;
 80046d2:	e040      	b.n	8004756 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046e0:	461a      	mov	r2, r3
 80046e2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80046e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80046e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	da34      	bge.n	800475a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	440a      	add	r2, r1
 8004706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800470a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800470e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004710:	e023      	b.n	800475a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4413      	add	r3, r2
 800471a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800471e:	461a      	mov	r2, r3
 8004720:	f240 2325 	movw	r3, #549	@ 0x225
 8004724:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004726:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800472a:	2b00      	cmp	r3, #0
 800472c:	da17      	bge.n	800475e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4413      	add	r3, r2
 8004736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	0151      	lsls	r1, r2, #5
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	440a      	add	r2, r1
 8004744:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004748:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800474c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800474e:	e006      	b.n	800475e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	77fb      	strb	r3, [r7, #31]
      break;
 8004754:	e004      	b.n	8004760 <USB_HC_Init+0x148>
      break;
 8004756:	bf00      	nop
 8004758:	e002      	b.n	8004760 <USB_HC_Init+0x148>
      break;
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <USB_HC_Init+0x148>
      break;
 800475e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4413      	add	r3, r2
 8004768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800476c:	461a      	mov	r2, r3
 800476e:	2300      	movs	r3, #0
 8004770:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4413      	add	r3, r2
 800477a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	440a      	add	r2, r1
 8004788:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800478c:	f043 0302 	orr.w	r3, r3, #2
 8004790:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	2101      	movs	r1, #1
 80047a2:	fa01 f303 	lsl.w	r3, r1, r3
 80047a6:	6939      	ldr	r1, [r7, #16]
 80047a8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80047ac:	4313      	orrs	r3, r2
 80047ae:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80047bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	da03      	bge.n	80047cc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80047c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	e001      	b.n	80047d0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff fef9 	bl	80045c8 <USB_GetHostSpeed>
 80047d6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80047d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d106      	bne.n	80047ee <USB_HC_Init+0x1d6>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d003      	beq.n	80047ee <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80047e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	e001      	b.n	80047f2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80047f2:	787b      	ldrb	r3, [r7, #1]
 80047f4:	059b      	lsls	r3, r3, #22
 80047f6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80047fa:	78bb      	ldrb	r3, [r7, #2]
 80047fc:	02db      	lsls	r3, r3, #11
 80047fe:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004802:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004804:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004808:	049b      	lsls	r3, r3, #18
 800480a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800480e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8004810:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004812:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004816:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	431a      	orrs	r2, r3
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	0151      	lsls	r1, r2, #5
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	440a      	add	r2, r1
 8004828:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800482c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004830:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004832:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004836:	2b03      	cmp	r3, #3
 8004838:	d003      	beq.n	8004842 <USB_HC_Init+0x22a>
 800483a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800483e:	2b01      	cmp	r3, #1
 8004840:	d10f      	bne.n	8004862 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	78fa      	ldrb	r2, [r7, #3]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	440a      	add	r2, r1
 8004858:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800485c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004860:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004862:	7ffb      	ldrb	r3, [r7, #31]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40040000 	.word	0x40040000

08004870 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08c      	sub	sp, #48	@ 0x30
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8004888:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800488c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a5d      	ldr	r2, [pc, #372]	@ (8004a08 <USB_HC_StartXfer+0x198>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d12f      	bne.n	80048f6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d11c      	bne.n	80048d6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	7c9b      	ldrb	r3, [r3, #18]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <USB_HC_StartXfer+0x3c>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	7c9b      	ldrb	r3, [r3, #18]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d124      	bne.n	80048f6 <USB_HC_StartXfer+0x86>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	799b      	ldrb	r3, [r3, #6]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d120      	bne.n	80048f6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	0151      	lsls	r1, r2, #5
 80048c6:	6a3a      	ldr	r2, [r7, #32]
 80048c8:	440a      	add	r2, r1
 80048ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d2:	60d3      	str	r3, [r2, #12]
 80048d4:	e00f      	b.n	80048f6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	791b      	ldrb	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10b      	bne.n	80048f6 <USB_HC_StartXfer+0x86>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	795b      	ldrb	r3, [r3, #5]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d107      	bne.n	80048f6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	785b      	ldrb	r3, [r3, #1]
 80048ea:	4619      	mov	r1, r3
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fb6b 	bl	8004fc8 <USB_DoPing>
        return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e232      	b.n	8004d5c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	799b      	ldrb	r3, [r3, #6]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d158      	bne.n	80049b0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80048fe:	2301      	movs	r3, #1
 8004900:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	78db      	ldrb	r3, [r3, #3]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800490a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	8a92      	ldrh	r2, [r2, #20]
 8004910:	fb03 f202 	mul.w	r2, r3, r2
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	61da      	str	r2, [r3, #28]
 8004918:	e07c      	b.n	8004a14 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	7c9b      	ldrb	r3, [r3, #18]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d130      	bne.n	8004984 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	2bbc      	cmp	r3, #188	@ 0xbc
 8004928:	d918      	bls.n	800495c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	8a9b      	ldrh	r3, [r3, #20]
 800492e:	461a      	mov	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d003      	beq.n	800494c <USB_HC_StartXfer+0xdc>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d103      	bne.n	8004954 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2202      	movs	r2, #2
 8004950:	60da      	str	r2, [r3, #12]
 8004952:	e05f      	b.n	8004a14 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2201      	movs	r2, #1
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	e05b      	b.n	8004a14 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d007      	beq.n	800497c <USB_HC_StartXfer+0x10c>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d003      	beq.n	800497c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2204      	movs	r2, #4
 8004978:	60da      	str	r2, [r3, #12]
 800497a:	e04b      	b.n	8004a14 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2203      	movs	r2, #3
 8004980:	60da      	str	r2, [r3, #12]
 8004982:	e047      	b.n	8004a14 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d10d      	bne.n	80049a6 <USB_HC_StartXfer+0x136>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	8a92      	ldrh	r2, [r2, #20]
 8004992:	4293      	cmp	r3, r2
 8004994:	d907      	bls.n	80049a6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004996:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	8a92      	ldrh	r2, [r2, #20]
 800499c:	fb03 f202 	mul.w	r2, r3, r2
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	61da      	str	r2, [r3, #28]
 80049a4:	e036      	b.n	8004a14 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	6a1a      	ldr	r2, [r3, #32]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	61da      	str	r2, [r3, #28]
 80049ae:	e031      	b.n	8004a14 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d018      	beq.n	80049ea <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	8a92      	ldrh	r2, [r2, #20]
 80049c0:	4413      	add	r3, r2
 80049c2:	3b01      	subs	r3, #1
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	8a92      	ldrh	r2, [r2, #20]
 80049c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80049ce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80049d0:	8b7b      	ldrh	r3, [r7, #26]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d90b      	bls.n	80049ee <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80049d6:	8b7b      	ldrh	r3, [r7, #26]
 80049d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80049da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	8a92      	ldrh	r2, [r2, #20]
 80049e0:	fb03 f202 	mul.w	r2, r3, r2
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	61da      	str	r2, [r3, #28]
 80049e8:	e001      	b.n	80049ee <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80049ea:	2301      	movs	r3, #1
 80049ec:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	78db      	ldrb	r3, [r3, #3]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80049f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	8a92      	ldrh	r2, [r2, #20]
 80049fc:	fb03 f202 	mul.w	r2, r3, r2
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	61da      	str	r2, [r3, #28]
 8004a04:	e006      	b.n	8004a14 <USB_HC_StartXfer+0x1a4>
 8004a06:	bf00      	nop
 8004a08:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	6a1a      	ldr	r2, [r3, #32]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004a1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a1e:	04d9      	lsls	r1, r3, #19
 8004a20:	4ba3      	ldr	r3, [pc, #652]	@ (8004cb0 <USB_HC_StartXfer+0x440>)
 8004a22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	7d9b      	ldrb	r3, [r3, #22]
 8004a2a:	075b      	lsls	r3, r3, #29
 8004a2c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a30:	69f9      	ldr	r1, [r7, #28]
 8004a32:	0148      	lsls	r0, r1, #5
 8004a34:	6a39      	ldr	r1, [r7, #32]
 8004a36:	4401      	add	r1, r0
 8004a38:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004a3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004a3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	6999      	ldr	r1, [r3, #24]
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a56:	460a      	mov	r2, r1
 8004a58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	6a3a      	ldr	r2, [r7, #32]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a8c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004a90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	7e7b      	ldrb	r3, [r7, #25]
 8004aa2:	075b      	lsls	r3, r3, #29
 8004aa4:	69f9      	ldr	r1, [r7, #28]
 8004aa6:	0148      	lsls	r0, r1, #5
 8004aa8:	6a39      	ldr	r1, [r7, #32]
 8004aaa:	4401      	add	r1, r0
 8004aac:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	799b      	ldrb	r3, [r3, #6]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	f040 80c3 	bne.w	8004c44 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	7c5b      	ldrb	r3, [r3, #17]
 8004ac2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	6a3a      	ldr	r2, [r7, #32]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8004ad6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8004ada:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	6a3a      	ldr	r2, [r7, #32]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004af6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004afa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	79db      	ldrb	r3, [r3, #7]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d123      	bne.n	8004b4c <USB_HC_StartXfer+0x2dc>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	78db      	ldrb	r3, [r3, #3]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d11f      	bne.n	8004b4c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	6a3a      	ldr	r2, [r7, #32]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b2a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	6a3a      	ldr	r2, [r7, #32]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b4a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	7c9b      	ldrb	r3, [r3, #18]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d003      	beq.n	8004b5c <USB_HC_StartXfer+0x2ec>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	7c9b      	ldrb	r3, [r3, #18]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d117      	bne.n	8004b8c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d113      	bne.n	8004b8c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	78db      	ldrb	r3, [r3, #3]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d10f      	bne.n	8004b8c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	0151      	lsls	r1, r2, #5
 8004b7e:	6a3a      	ldr	r2, [r7, #32]
 8004b80:	440a      	add	r2, r1
 8004b82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b8a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	7c9b      	ldrb	r3, [r3, #18]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d162      	bne.n	8004c5a <USB_HC_StartXfer+0x3ea>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	78db      	ldrb	r3, [r3, #3]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d15e      	bne.n	8004c5a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d858      	bhi.n	8004c58 <USB_HC_StartXfer+0x3e8>
 8004ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bac <USB_HC_StartXfer+0x33c>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bdf 	.word	0x08004bdf
 8004bb4:	08004c01 	.word	0x08004c01
 8004bb8:	08004c23 	.word	0x08004c23
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	6a3a      	ldr	r2, [r7, #32]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bda:	6053      	str	r3, [r2, #4]
          break;
 8004bdc:	e03d      	b.n	8004c5a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	0151      	lsls	r1, r2, #5
 8004bf0:	6a3a      	ldr	r2, [r7, #32]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bf8:	f043 030e 	orr.w	r3, r3, #14
 8004bfc:	6053      	str	r3, [r2, #4]
          break;
 8004bfe:	e02c      	b.n	8004c5a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	0151      	lsls	r1, r2, #5
 8004c12:	6a3a      	ldr	r2, [r7, #32]
 8004c14:	440a      	add	r2, r1
 8004c16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c1e:	6053      	str	r3, [r2, #4]
          break;
 8004c20:	e01b      	b.n	8004c5a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	0151      	lsls	r1, r2, #5
 8004c34:	6a3a      	ldr	r2, [r7, #32]
 8004c36:	440a      	add	r2, r1
 8004c38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c40:	6053      	str	r3, [r2, #4]
          break;
 8004c42:	e00a      	b.n	8004c5a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c50:	461a      	mov	r2, r3
 8004c52:	2300      	movs	r3, #0
 8004c54:	6053      	str	r3, [r2, #4]
 8004c56:	e000      	b.n	8004c5a <USB_HC_StartXfer+0x3ea>
          break;
 8004c58:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c70:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	78db      	ldrb	r3, [r3, #3]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d004      	beq.n	8004c84 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	e003      	b.n	8004c8c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c8a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c92:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004ca6:	79fb      	ldrb	r3, [r7, #7]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	e055      	b.n	8004d5c <USB_HC_StartXfer+0x4ec>
 8004cb0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	78db      	ldrb	r3, [r3, #3]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d14e      	bne.n	8004d5a <USB_HC_StartXfer+0x4ea>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d04a      	beq.n	8004d5a <USB_HC_StartXfer+0x4ea>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	79db      	ldrb	r3, [r3, #7]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d146      	bne.n	8004d5a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	7c9b      	ldrb	r3, [r3, #18]
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d831      	bhi.n	8004d38 <USB_HC_StartXfer+0x4c8>
 8004cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cdc <USB_HC_StartXfer+0x46c>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004ced 	.word	0x08004ced
 8004ce0:	08004d11 	.word	0x08004d11
 8004ce4:	08004ced 	.word	0x08004ced
 8004ce8:	08004d11 	.word	0x08004d11
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	3303      	adds	r3, #3
 8004cf2:	089b      	lsrs	r3, r3, #2
 8004cf4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004cf6:	8afa      	ldrh	r2, [r7, #22]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d91c      	bls.n	8004d3c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8004d0e:	e015      	b.n	8004d3c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	3303      	adds	r3, #3
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004d1a:	8afa      	ldrh	r2, [r7, #22]
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d90a      	bls.n	8004d40 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	619a      	str	r2, [r3, #24]
        }
        break;
 8004d36:	e003      	b.n	8004d40 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8004d38:	bf00      	nop
 8004d3a:	e002      	b.n	8004d42 <USB_HC_StartXfer+0x4d2>
        break;
 8004d3c:	bf00      	nop
 8004d3e:	e000      	b.n	8004d42 <USB_HC_StartXfer+0x4d2>
        break;
 8004d40:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6999      	ldr	r1, [r3, #24]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	785a      	ldrb	r2, [r3, #1]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2000      	movs	r0, #0
 8004d52:	9000      	str	r0, [sp, #0]
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff f9c9 	bl	80040ec <USB_WritePacket>
  }

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3728      	adds	r7, #40	@ 0x28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	b29b      	uxth	r3, r3
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b089      	sub	sp, #36	@ 0x24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	0c9b      	lsrs	r3, r3, #18
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	0fdb      	lsrs	r3, r3, #31
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	0fdb      	lsrs	r3, r3, #31
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d10d      	bne.n	8004e08 <USB_HC_Halt+0x82>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <USB_HC_Halt+0x82>
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d002      	beq.n	8004e04 <USB_HC_Halt+0x7e>
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d101      	bne.n	8004e08 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	e0d8      	b.n	8004fba <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <USB_HC_Halt+0x8e>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d173      	bne.n	8004efc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e32:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d14a      	bne.n	8004ed6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d133      	bne.n	8004eb4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e6a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e8a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e98:	d82e      	bhi.n	8004ef8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004eb0:	d0ec      	beq.n	8004e8c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004eb2:	e081      	b.n	8004fb8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ece:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ed2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ed4:	e070      	b.n	8004fb8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	0151      	lsls	r1, r2, #5
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	440a      	add	r2, r1
 8004eec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ef0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ef4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ef6:	e05f      	b.n	8004fb8 <USB_HC_Halt+0x232>
            break;
 8004ef8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004efa:	e05d      	b.n	8004fb8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f1a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d133      	bne.n	8004f94 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	0151      	lsls	r1, r2, #5
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	440a      	add	r2, r1
 8004f42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f6a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f78:	d81d      	bhi.n	8004fb6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f90:	d0ec      	beq.n	8004f6c <USB_HC_Halt+0x1e6>
 8004f92:	e011      	b.n	8004fb8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	0151      	lsls	r1, r2, #5
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	440a      	add	r2, r1
 8004faa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	e000      	b.n	8004fb8 <USB_HC_Halt+0x232>
          break;
 8004fb6:	bf00      	nop
    }
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3724      	adds	r7, #36	@ 0x24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	04da      	lsls	r2, r3, #19
 8004fe4:	4b15      	ldr	r3, [pc, #84]	@ (800503c <USB_DoPing+0x74>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ff4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ff8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005010:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005018:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005026:	461a      	mov	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	1ff80000 	.word	0x1ff80000

08005040 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7fe ff8c 	bl	8003f72 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800505a:	2110      	movs	r1, #16
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7fe ffe5 	bl	800402c <USB_FlushTxFifo>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff f80f 	bl	8004090 <USB_FlushRxFifo>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800507c:	2300      	movs	r3, #0
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	e01f      	b.n	80050c2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	4413      	add	r3, r2
 800508a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005098:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050b6:	461a      	mov	r2, r3
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	3301      	adds	r3, #1
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2b0f      	cmp	r3, #15
 80050c6:	d9dc      	bls.n	8005082 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80050c8:	2300      	movs	r3, #0
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	e034      	b.n	8005138 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80050ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005102:	461a      	mov	r2, r3
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3301      	adds	r3, #1
 800510c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005114:	d80c      	bhi.n	8005130 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	4413      	add	r3, r2
 800511e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800512c:	d0ec      	beq.n	8005108 <USB_StopHost+0xc8>
 800512e:	e000      	b.n	8005132 <USB_StopHost+0xf2>
        break;
 8005130:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	3301      	adds	r3, #1
 8005136:	61bb      	str	r3, [r7, #24]
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b0f      	cmp	r3, #15
 800513c:	d9c7      	bls.n	80050ce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005144:	461a      	mov	r2, r3
 8005146:	f04f 33ff 	mov.w	r3, #4294967295
 800514a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f04f 32ff 	mov.w	r2, #4294967295
 8005152:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7fe fefb 	bl	8003f50 <USB_EnableGlobalInt>

  return ret;
 800515a:	7ffb      	ldrb	r3, [r7, #31]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b089      	sub	sp, #36	@ 0x24
 8005168:	af04      	add	r7, sp, #16
 800516a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800516c:	2301      	movs	r3, #1
 800516e:	2202      	movs	r2, #2
 8005170:	2102      	movs	r1, #2
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fc85 	bl	8005a82 <USBH_FindInterface>
 8005178:	4603      	mov	r3, r0
 800517a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	2bff      	cmp	r3, #255	@ 0xff
 8005180:	d002      	beq.n	8005188 <USBH_CDC_InterfaceInit+0x24>
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d901      	bls.n	800518c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005188:	2302      	movs	r3, #2
 800518a:	e13d      	b.n	8005408 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fc5a 	bl	8005a4a <USBH_SelectInterface>
 8005196:	4603      	mov	r3, r0
 8005198:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800519a:	7bbb      	ldrb	r3, [r7, #14]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80051a0:	2302      	movs	r3, #2
 80051a2:	e131      	b.n	8005408 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80051aa:	2050      	movs	r0, #80	@ 0x50
 80051ac:	f002 fb40 	bl	8007830 <malloc>
 80051b0:	4603      	mov	r3, r0
 80051b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80051c4:	2302      	movs	r3, #2
 80051c6:	e11f      	b.n	8005408 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80051c8:	2250      	movs	r2, #80	@ 0x50
 80051ca:	2100      	movs	r1, #0
 80051cc:	68b8      	ldr	r0, [r7, #8]
 80051ce:	f002 fbed 	bl	80079ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	211a      	movs	r1, #26
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	4413      	add	r3, r2
 80051de:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	b25b      	sxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	da15      	bge.n	8005216 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	211a      	movs	r1, #26
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80051fa:	781a      	ldrb	r2, [r3, #0]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	211a      	movs	r1, #26
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	4413      	add	r3, r2
 800520c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005210:	881a      	ldrh	r2, [r3, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	785b      	ldrb	r3, [r3, #1]
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f001 ffbe 	bl	800719e <USBH_AllocPipe>
 8005222:	4603      	mov	r3, r0
 8005224:	461a      	mov	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	7819      	ldrb	r1, [r3, #0]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	7858      	ldrb	r0, [r3, #1]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	8952      	ldrh	r2, [r2, #10]
 8005242:	9202      	str	r2, [sp, #8]
 8005244:	2203      	movs	r2, #3
 8005246:	9201      	str	r2, [sp, #4]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	4623      	mov	r3, r4
 800524c:	4602      	mov	r2, r0
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f001 ff76 	bl	8007140 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2200      	movs	r2, #0
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f002 fa7c 	bl	800775a <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005262:	2300      	movs	r3, #0
 8005264:	2200      	movs	r2, #0
 8005266:	210a      	movs	r1, #10
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fc0a 	bl	8005a82 <USBH_FindInterface>
 800526e:	4603      	mov	r3, r0
 8005270:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	2bff      	cmp	r3, #255	@ 0xff
 8005276:	d002      	beq.n	800527e <USBH_CDC_InterfaceInit+0x11a>
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d901      	bls.n	8005282 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800527e:	2302      	movs	r3, #2
 8005280:	e0c2      	b.n	8005408 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	211a      	movs	r1, #26
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	4413      	add	r3, r2
 800528e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	b25b      	sxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	da16      	bge.n	80052c8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	211a      	movs	r1, #26
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	4413      	add	r3, r2
 80052a6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80052aa:	781a      	ldrb	r2, [r3, #0]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	211a      	movs	r1, #26
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80052c0:	881a      	ldrh	r2, [r3, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	835a      	strh	r2, [r3, #26]
 80052c6:	e015      	b.n	80052f4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	211a      	movs	r1, #26
 80052ce:	fb01 f303 	mul.w	r3, r1, r3
 80052d2:	4413      	add	r3, r2
 80052d4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80052d8:	781a      	ldrb	r2, [r3, #0]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	211a      	movs	r1, #26
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80052ee:	881a      	ldrh	r2, [r3, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	211a      	movs	r1, #26
 80052fa:	fb01 f303 	mul.w	r3, r1, r3
 80052fe:	4413      	add	r3, r2
 8005300:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	b25b      	sxtb	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	da16      	bge.n	800533a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	211a      	movs	r1, #26
 8005312:	fb01 f303 	mul.w	r3, r1, r3
 8005316:	4413      	add	r3, r2
 8005318:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800531c:	781a      	ldrb	r2, [r3, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	211a      	movs	r1, #26
 8005328:	fb01 f303 	mul.w	r3, r1, r3
 800532c:	4413      	add	r3, r2
 800532e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005332:	881a      	ldrh	r2, [r3, #0]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	835a      	strh	r2, [r3, #26]
 8005338:	e015      	b.n	8005366 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	211a      	movs	r1, #26
 8005340:	fb01 f303 	mul.w	r3, r1, r3
 8005344:	4413      	add	r3, r2
 8005346:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800534a:	781a      	ldrb	r2, [r3, #0]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005350:	7bfb      	ldrb	r3, [r7, #15]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	211a      	movs	r1, #26
 8005356:	fb01 f303 	mul.w	r3, r1, r3
 800535a:	4413      	add	r3, r2
 800535c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005360:	881a      	ldrh	r2, [r3, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	7b9b      	ldrb	r3, [r3, #14]
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 ff16 	bl	800719e <USBH_AllocPipe>
 8005372:	4603      	mov	r3, r0
 8005374:	461a      	mov	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	7bdb      	ldrb	r3, [r3, #15]
 800537e:	4619      	mov	r1, r3
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f001 ff0c 	bl	800719e <USBH_AllocPipe>
 8005386:	4603      	mov	r3, r0
 8005388:	461a      	mov	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	7b59      	ldrb	r1, [r3, #13]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	7b98      	ldrb	r0, [r3, #14]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	8b12      	ldrh	r2, [r2, #24]
 80053a6:	9202      	str	r2, [sp, #8]
 80053a8:	2202      	movs	r2, #2
 80053aa:	9201      	str	r2, [sp, #4]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	4623      	mov	r3, r4
 80053b0:	4602      	mov	r2, r0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f001 fec4 	bl	8007140 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	7b19      	ldrb	r1, [r3, #12]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	7bd8      	ldrb	r0, [r3, #15]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	8b52      	ldrh	r2, [r2, #26]
 80053d0:	9202      	str	r2, [sp, #8]
 80053d2:	2202      	movs	r2, #2
 80053d4:	9201      	str	r2, [sp, #4]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	4623      	mov	r3, r4
 80053da:	4602      	mov	r2, r0
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 feaf 	bl	8007140 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	7b5b      	ldrb	r3, [r3, #13]
 80053ee:	2200      	movs	r2, #0
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f002 f9b1 	bl	800775a <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	7b1b      	ldrb	r3, [r3, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f002 f9aa 	bl	800775a <USBH_LL_SetToggle>

  return USBH_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	bd90      	pop	{r4, r7, pc}

08005410 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00e      	beq.n	8005448 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f001 fea4 	bl	800717e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	4619      	mov	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 fecf 	bl	80071e0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	7b1b      	ldrb	r3, [r3, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00e      	beq.n	800546e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	7b1b      	ldrb	r3, [r3, #12]
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 fe91 	bl	800717e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	7b1b      	ldrb	r3, [r3, #12]
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 febc 	bl	80071e0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	7b5b      	ldrb	r3, [r3, #13]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00e      	beq.n	8005494 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	7b5b      	ldrb	r3, [r3, #13]
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 fe7e 	bl	800717e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	7b5b      	ldrb	r3, [r3, #13]
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f001 fea9 	bl	80071e0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f002 f9c9 	bl	8007840 <free>
    phost->pActiveClass->pData = 0U;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80054b4:	2200      	movs	r2, #0
 80054b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3340      	adds	r3, #64	@ 0x40
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f8b1 	bl	8005642 <GetLineCoding>
 80054e0:	4603      	mov	r3, r0
 80054e2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80054e4:	7afb      	ldrb	r3, [r7, #11]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d105      	bne.n	80054f6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80054f0:	2102      	movs	r1, #2
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80054f6:	7afb      	ldrb	r3, [r7, #11]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005508:	2301      	movs	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005520:	2b04      	cmp	r3, #4
 8005522:	d877      	bhi.n	8005614 <USBH_CDC_Process+0x114>
 8005524:	a201      	add	r2, pc, #4	@ (adr r2, 800552c <USBH_CDC_Process+0x2c>)
 8005526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552a:	bf00      	nop
 800552c:	08005541 	.word	0x08005541
 8005530:	08005547 	.word	0x08005547
 8005534:	08005577 	.word	0x08005577
 8005538:	080055eb 	.word	0x080055eb
 800553c:	080055f9 	.word	0x080055f9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	73fb      	strb	r3, [r7, #15]
      break;
 8005544:	e06d      	b.n	8005622 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800554a:	4619      	mov	r1, r3
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f897 	bl	8005680 <SetLineCoding>
 8005552:	4603      	mov	r3, r0
 8005554:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005556:	7bbb      	ldrb	r3, [r7, #14]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005564:	e058      	b.n	8005618 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005566:	7bbb      	ldrb	r3, [r7, #14]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d055      	beq.n	8005618 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2204      	movs	r2, #4
 8005570:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8005574:	e050      	b.n	8005618 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	3340      	adds	r3, #64	@ 0x40
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f860 	bl	8005642 <GetLineCoding>
 8005582:	4603      	mov	r3, r0
 8005584:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005586:	7bbb      	ldrb	r3, [r7, #14]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d126      	bne.n	80055da <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800559e:	791b      	ldrb	r3, [r3, #4]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d13b      	bne.n	800561c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d133      	bne.n	800561c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055be:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d12b      	bne.n	800561c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055cc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d124      	bne.n	800561c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f958 	bl	8005888 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80055d8:	e020      	b.n	800561c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80055da:	7bbb      	ldrb	r3, [r7, #14]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d01d      	beq.n	800561c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2204      	movs	r2, #4
 80055e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80055e8:	e018      	b.n	800561c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f867 	bl	80056be <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f8da 	bl	80057aa <CDC_ProcessReception>
      break;
 80055f6:	e014      	b.n	8005622 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80055f8:	2100      	movs	r1, #0
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f001 f81a 	bl	8006634 <USBH_ClrFeature>
 8005600:	4603      	mov	r3, r0
 8005602:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005604:	7bbb      	ldrb	r3, [r7, #14]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8005612:	e005      	b.n	8005620 <USBH_CDC_Process+0x120>

    default:
      break;
 8005614:	bf00      	nop
 8005616:	e004      	b.n	8005622 <USBH_CDC_Process+0x122>
      break;
 8005618:	bf00      	nop
 800561a:	e002      	b.n	8005622 <USBH_CDC_Process+0x122>
      break;
 800561c:	bf00      	nop
 800561e:	e000      	b.n	8005622 <USBH_CDC_Process+0x122>
      break;
 8005620:	bf00      	nop

  }

  return status;
 8005622:	7bfb      	ldrb	r3, [r7, #15]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	22a1      	movs	r2, #161	@ 0xa1
 8005650:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2221      	movs	r2, #33	@ 0x21
 8005656:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2207      	movs	r2, #7
 8005668:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2207      	movs	r2, #7
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 fb14 	bl	8006c9e <USBH_CtlReq>
 8005676:	4603      	mov	r3, r0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2221      	movs	r2, #33	@ 0x21
 800568e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2207      	movs	r2, #7
 80056a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2207      	movs	r2, #7
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f001 faf5 	bl	8006c9e <USBH_CtlReq>
 80056b4:	4603      	mov	r3, r0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b086      	sub	sp, #24
 80056c2:	af02      	add	r7, sp, #8
 80056c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d002      	beq.n	80056e4 <CDC_ProcessTransmission+0x26>
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d023      	beq.n	800572a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80056e2:	e05e      	b.n	80057a2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	8b12      	ldrh	r2, [r2, #24]
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d90b      	bls.n	8005708 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	69d9      	ldr	r1, [r3, #28]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8b1a      	ldrh	r2, [r3, #24]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	7b5b      	ldrb	r3, [r3, #13]
 80056fc:	2001      	movs	r0, #1
 80056fe:	9000      	str	r0, [sp, #0]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 fcda 	bl	80070ba <USBH_BulkSendData>
 8005706:	e00b      	b.n	8005720 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	7b5b      	ldrb	r3, [r3, #13]
 8005716:	2001      	movs	r0, #1
 8005718:	9000      	str	r0, [sp, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f001 fccd 	bl	80070ba <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8005728:	e03b      	b.n	80057a2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	7b5b      	ldrb	r3, [r3, #13]
 800572e:	4619      	mov	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 fff1 	bl	8007718 <USBH_LL_GetURBState>
 8005736:	4603      	mov	r3, r0
 8005738:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800573a:	7afb      	ldrb	r3, [r7, #11]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d128      	bne.n	8005792 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	8b12      	ldrh	r2, [r2, #24]
 8005748:	4293      	cmp	r3, r2
 800574a:	d90e      	bls.n	800576a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	8b12      	ldrh	r2, [r2, #24]
 8005754:	1a9a      	subs	r2, r3, r2
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	8b12      	ldrh	r2, [r2, #24]
 8005762:	441a      	add	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	61da      	str	r2, [r3, #28]
 8005768:	e002      	b.n	8005770 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d004      	beq.n	8005782 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8005780:	e00e      	b.n	80057a0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f868 	bl	8005860 <USBH_CDC_TransmitCallback>
      break;
 8005790:	e006      	b.n	80057a0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d103      	bne.n	80057a0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80057a0:	bf00      	nop
  }
}
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b086      	sub	sp, #24
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80057bc:	2300      	movs	r3, #0
 80057be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d002      	beq.n	80057d0 <CDC_ProcessReception+0x26>
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d00e      	beq.n	80057ec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80057ce:	e043      	b.n	8005858 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	6a19      	ldr	r1, [r3, #32]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	8b5a      	ldrh	r2, [r3, #26]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	7b1b      	ldrb	r3, [r3, #12]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 fc91 	bl	8007104 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2204      	movs	r2, #4
 80057e6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80057ea:	e035      	b.n	8005858 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	7b1b      	ldrb	r3, [r3, #12]
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f001 ff90 	bl	8007718 <USBH_LL_GetURBState>
 80057f8:	4603      	mov	r3, r0
 80057fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d129      	bne.n	8005856 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	7b1b      	ldrb	r3, [r3, #12]
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f001 fef3 	bl	80075f4 <USBH_LL_GetLastXferSize>
 800580e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	429a      	cmp	r2, r3
 8005818:	d016      	beq.n	8005848 <CDC_ProcessReception+0x9e>
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	8b5b      	ldrh	r3, [r3, #26]
 800581e:	461a      	mov	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4293      	cmp	r3, r2
 8005824:	d910      	bls.n	8005848 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	1ad2      	subs	r2, r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	6a1a      	ldr	r2, [r3, #32]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	441a      	add	r2, r3
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2203      	movs	r2, #3
 8005842:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8005846:	e006      	b.n	8005856 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f80f 	bl	8005874 <USBH_CDC_ReceiveCallback>
      break;
 8005856:	bf00      	nop
  }
}
 8005858:	bf00      	nop
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80058b0:	2302      	movs	r3, #2
 80058b2:	e029      	b.n	8005908 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	79fa      	ldrb	r2, [r7, #7]
 80058b8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f81f 	bl	8005910 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f001 fdc3 	bl	800748c <USBH_LL_Init>

  return USBH_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	e009      	b.n	8005936 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	33e0      	adds	r3, #224	@ 0xe0
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	2200      	movs	r2, #0
 800592e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b0f      	cmp	r3, #15
 800593a:	d9f2      	bls.n	8005922 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	e009      	b.n	8005956 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3301      	adds	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800595c:	d3f1      	bcc.n	8005942 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2240      	movs	r2, #64	@ 0x40
 8005982:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	331c      	adds	r3, #28
 80059ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059b2:	2100      	movs	r1, #0
 80059b4:	4618      	mov	r0, r3
 80059b6:	f001 fff9 	bl	80079ac <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80059c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059c4:	2100      	movs	r1, #0
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 fff0 	bl	80079ac <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80059d2:	2212      	movs	r2, #18
 80059d4:	2100      	movs	r1, #0
 80059d6:	4618      	mov	r0, r3
 80059d8:	f001 ffe8 	bl	80079ac <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80059e2:	223e      	movs	r2, #62	@ 0x3e
 80059e4:	2100      	movs	r1, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 ffe0 	bl	80079ac <memset>

  return USBH_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d016      	beq.n	8005a38 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10e      	bne.n	8005a32 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8005a1a:	1c59      	adds	r1, r3, #1
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	33de      	adds	r3, #222	@ 0xde
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	e004      	b.n	8005a3c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005a32:	2302      	movs	r3, #2
 8005a34:	73fb      	strb	r3, [r7, #15]
 8005a36:	e001      	b.n	8005a3c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8005a60:	78fa      	ldrb	r2, [r7, #3]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d204      	bcs.n	8005a70 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	78fa      	ldrb	r2, [r7, #3]
 8005a6a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8005a6e:	e001      	b.n	8005a74 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005a70:	2302      	movs	r3, #2
 8005a72:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b087      	sub	sp, #28
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	4608      	mov	r0, r1
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	461a      	mov	r2, r3
 8005a90:	4603      	mov	r3, r0
 8005a92:	70fb      	strb	r3, [r7, #3]
 8005a94:	460b      	mov	r3, r1
 8005a96:	70bb      	strb	r3, [r7, #2]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8005aaa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005aac:	e025      	b.n	8005afa <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	221a      	movs	r2, #26
 8005ab2:	fb02 f303 	mul.w	r3, r2, r3
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	3302      	adds	r3, #2
 8005abe:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	795b      	ldrb	r3, [r3, #5]
 8005ac4:	78fa      	ldrb	r2, [r7, #3]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d002      	beq.n	8005ad0 <USBH_FindInterface+0x4e>
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	2bff      	cmp	r3, #255	@ 0xff
 8005ace:	d111      	bne.n	8005af4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ad4:	78ba      	ldrb	r2, [r7, #2]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d002      	beq.n	8005ae0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ada:	78bb      	ldrb	r3, [r7, #2]
 8005adc:	2bff      	cmp	r3, #255	@ 0xff
 8005ade:	d109      	bne.n	8005af4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ae4:	787a      	ldrb	r2, [r7, #1]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d002      	beq.n	8005af0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005aea:	787b      	ldrb	r3, [r7, #1]
 8005aec:	2bff      	cmp	r3, #255	@ 0xff
 8005aee:	d101      	bne.n	8005af4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	e006      	b.n	8005b02 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	3301      	adds	r3, #1
 8005af8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d9d6      	bls.n	8005aae <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005b00:	23ff      	movs	r3, #255	@ 0xff
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f001 fcf4 	bl	8007504 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 fe0d 	bl	800773e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af04      	add	r7, sp, #16
 8005b36:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005b38:	2302      	movs	r3, #2
 8005b3a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d102      	bne.n	8005b52 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2203      	movs	r2, #3
 8005b50:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b0b      	cmp	r3, #11
 8005b5a:	f200 81bb 	bhi.w	8005ed4 <USBH_Process+0x3a4>
 8005b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b64 <USBH_Process+0x34>)
 8005b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b64:	08005b95 	.word	0x08005b95
 8005b68:	08005bc7 	.word	0x08005bc7
 8005b6c:	08005c2f 	.word	0x08005c2f
 8005b70:	08005e6f 	.word	0x08005e6f
 8005b74:	08005ed5 	.word	0x08005ed5
 8005b78:	08005ccf 	.word	0x08005ccf
 8005b7c:	08005e15 	.word	0x08005e15
 8005b80:	08005d05 	.word	0x08005d05
 8005b84:	08005d25 	.word	0x08005d25
 8005b88:	08005d43 	.word	0x08005d43
 8005b8c:	08005d87 	.word	0x08005d87
 8005b90:	08005e57 	.word	0x08005e57
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 819b 	beq.w	8005ed8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005ba8:	20c8      	movs	r0, #200	@ 0xc8
 8005baa:	f001 fe09 	bl	80077c0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 fd05 	bl	80075be <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005bc4:	e188      	b.n	8005ed8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d107      	bne.n	8005be0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005bde:	e18a      	b.n	8005ef6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8005be6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bea:	d914      	bls.n	8005c16 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d903      	bls.n	8005c0e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	220d      	movs	r2, #13
 8005c0a:	701a      	strb	r2, [r3, #0]
      break;
 8005c0c:	e173      	b.n	8005ef6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	701a      	strb	r2, [r3, #0]
      break;
 8005c14:	e16f      	b.n	8005ef6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8005c1c:	f103 020a 	add.w	r2, r3, #10
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8005c26:	200a      	movs	r0, #10
 8005c28:	f001 fdca 	bl	80077c0 <USBH_Delay>
      break;
 8005c2c:	e163      	b.n	8005ef6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005c3e:	2104      	movs	r1, #4
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005c44:	2064      	movs	r0, #100	@ 0x64
 8005c46:	f001 fdbb 	bl	80077c0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f001 fc90 	bl	8007570 <USBH_LL_GetSpeed>
 8005c50:	4603      	mov	r3, r0
 8005c52:	461a      	mov	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2205      	movs	r2, #5
 8005c5e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005c60:	2100      	movs	r1, #0
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 fa9b 	bl	800719e <USBH_AllocPipe>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005c70:	2180      	movs	r1, #128	@ 0x80
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 fa93 	bl	800719e <USBH_AllocPipe>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	7919      	ldrb	r1, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005c94:	9202      	str	r2, [sp, #8]
 8005c96:	2200      	movs	r2, #0
 8005c98:	9201      	str	r2, [sp, #4]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2280      	movs	r2, #128	@ 0x80
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 fa4d 	bl	8007140 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	7959      	ldrb	r1, [r3, #5]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005cba:	9202      	str	r2, [sp, #8]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	9201      	str	r2, [sp, #4]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f001 fa3a 	bl	8007140 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005ccc:	e113      	b.n	8005ef6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f916 	bl	8005f00 <USBH_HandleEnum>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005cd8:	7bbb      	ldrb	r3, [r7, #14]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f040 80fd 	bne.w	8005edc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d103      	bne.n	8005cfc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2208      	movs	r2, #8
 8005cf8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005cfa:	e0ef      	b.n	8005edc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2207      	movs	r2, #7
 8005d00:	701a      	strb	r2, [r3, #0]
      break;
 8005d02:	e0eb      	b.n	8005edc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80e8 	beq.w	8005ee0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005d16:	2101      	movs	r1, #1
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2208      	movs	r2, #8
 8005d20:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8005d22:	e0dd      	b.n	8005ee0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fc3a 	bl	80065a6 <USBH_SetCfg>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f040 80d5 	bne.w	8005ee4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2209      	movs	r2, #9
 8005d3e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005d40:	e0d0      	b.n	8005ee4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d016      	beq.n	8005d7e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8005d50:	2101      	movs	r1, #1
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fc4a 	bl	80065ec <USBH_SetFeature>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005d5c:	7bbb      	ldrb	r3, [r7, #14]
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d103      	bne.n	8005d6c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	220a      	movs	r2, #10
 8005d68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005d6a:	e0bd      	b.n	8005ee8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8005d6c:	7bbb      	ldrb	r3, [r7, #14]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	f040 80b9 	bne.w	8005ee8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	220a      	movs	r2, #10
 8005d7a:	701a      	strb	r2, [r3, #0]
      break;
 8005d7c:	e0b4      	b.n	8005ee8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	220a      	movs	r2, #10
 8005d82:	701a      	strb	r2, [r3, #0]
      break;
 8005d84:	e0b0      	b.n	8005ee8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 80ad 	beq.w	8005eec <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	73fb      	strb	r3, [r7, #15]
 8005d9e:	e016      	b.n	8005dce <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005da0:	7bfa      	ldrb	r2, [r7, #15]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	32de      	adds	r2, #222	@ 0xde
 8005da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005daa:	791a      	ldrb	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d108      	bne.n	8005dc8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005db6:	7bfa      	ldrb	r2, [r7, #15]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	32de      	adds	r2, #222	@ 0xde
 8005dbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8005dc6:	e005      	b.n	8005dd4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0e5      	beq.n	8005da0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d016      	beq.n	8005e0c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d109      	bne.n	8005e04 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2206      	movs	r2, #6
 8005df4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005dfc:	2103      	movs	r1, #3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005e02:	e073      	b.n	8005eec <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	220d      	movs	r2, #13
 8005e08:	701a      	strb	r2, [r3, #0]
      break;
 8005e0a:	e06f      	b.n	8005eec <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	220d      	movs	r2, #13
 8005e10:	701a      	strb	r2, [r3, #0]
      break;
 8005e12:	e06b      	b.n	8005eec <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d017      	beq.n	8005e4e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005e2e:	7bbb      	ldrb	r3, [r7, #14]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	220b      	movs	r2, #11
 8005e3a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005e3c:	e058      	b.n	8005ef0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8005e3e:	7bbb      	ldrb	r3, [r7, #14]
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d154      	bne.n	8005ef0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	220d      	movs	r2, #13
 8005e4a:	701a      	strb	r2, [r3, #0]
      break;
 8005e4c:	e050      	b.n	8005ef0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	220d      	movs	r2, #13
 8005e52:	701a      	strb	r2, [r3, #0]
      break;
 8005e54:	e04c      	b.n	8005ef0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d049      	beq.n	8005ef4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4798      	blx	r3
      }
      break;
 8005e6c:	e042      	b.n	8005ef4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fd4a 	bl	8005910 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005eaa:	2105      	movs	r1, #5
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d107      	bne.n	8005ecc <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fe22 	bl	8005b0e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005eca:	e014      	b.n	8005ef6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f001 fb19 	bl	8007504 <USBH_LL_Start>
      break;
 8005ed2:	e010      	b.n	8005ef6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8005ed4:	bf00      	nop
 8005ed6:	e00e      	b.n	8005ef6 <USBH_Process+0x3c6>
      break;
 8005ed8:	bf00      	nop
 8005eda:	e00c      	b.n	8005ef6 <USBH_Process+0x3c6>
      break;
 8005edc:	bf00      	nop
 8005ede:	e00a      	b.n	8005ef6 <USBH_Process+0x3c6>
    break;
 8005ee0:	bf00      	nop
 8005ee2:	e008      	b.n	8005ef6 <USBH_Process+0x3c6>
      break;
 8005ee4:	bf00      	nop
 8005ee6:	e006      	b.n	8005ef6 <USBH_Process+0x3c6>
      break;
 8005ee8:	bf00      	nop
 8005eea:	e004      	b.n	8005ef6 <USBH_Process+0x3c6>
      break;
 8005eec:	bf00      	nop
 8005eee:	e002      	b.n	8005ef6 <USBH_Process+0x3c6>
      break;
 8005ef0:	bf00      	nop
 8005ef2:	e000      	b.n	8005ef6 <USBH_Process+0x3c6>
      break;
 8005ef4:	bf00      	nop
  }
  return USBH_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af04      	add	r7, sp, #16
 8005f06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b07      	cmp	r3, #7
 8005f16:	f200 81bd 	bhi.w	8006294 <USBH_HandleEnum+0x394>
 8005f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f20 <USBH_HandleEnum+0x20>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f41 	.word	0x08005f41
 8005f24:	08005ffb 	.word	0x08005ffb
 8005f28:	08006065 	.word	0x08006065
 8005f2c:	080060ef 	.word	0x080060ef
 8005f30:	08006159 	.word	0x08006159
 8005f34:	080061c9 	.word	0x080061c9
 8005f38:	0800620f 	.word	0x0800620f
 8005f3c:	08006255 	.word	0x08006255
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005f40:	2108      	movs	r1, #8
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa4c 	bl	80063e0 <USBH_Get_DevDesc>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d12e      	bne.n	8005fb0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	7919      	ldrb	r1, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005f76:	9202      	str	r2, [sp, #8]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	9201      	str	r2, [sp, #4]
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2280      	movs	r2, #128	@ 0x80
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 f8dc 	bl	8007140 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	7959      	ldrb	r1, [r3, #5]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005f9c:	9202      	str	r2, [sp, #8]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	9201      	str	r2, [sp, #4]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f001 f8c9 	bl	8007140 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005fae:	e173      	b.n	8006298 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	f040 8170 	bne.w	8006298 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d903      	bls.n	8005fda <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	220d      	movs	r2, #13
 8005fd6:	701a      	strb	r2, [r3, #0]
      break;
 8005fd8:	e15e      	b.n	8006298 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	795b      	ldrb	r3, [r3, #5]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 f8fd 	bl	80071e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	791b      	ldrb	r3, [r3, #4]
 8005fea:	4619      	mov	r1, r3
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 f8f7 	bl	80071e0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
      break;
 8005ff8:	e14e      	b.n	8006298 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005ffa:	2112      	movs	r1, #18
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f9ef 	bl	80063e0 <USBH_Get_DevDesc>
 8006002:	4603      	mov	r3, r0
 8006004:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d103      	bne.n	8006014 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006012:	e143      	b.n	800629c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006014:	7bbb      	ldrb	r3, [r7, #14]
 8006016:	2b03      	cmp	r3, #3
 8006018:	f040 8140 	bne.w	800629c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006022:	3301      	adds	r3, #1
 8006024:	b2da      	uxtb	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006032:	2b03      	cmp	r3, #3
 8006034:	d903      	bls.n	800603e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	220d      	movs	r2, #13
 800603a:	701a      	strb	r2, [r3, #0]
      break;
 800603c:	e12e      	b.n	800629c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	795b      	ldrb	r3, [r3, #5]
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 f8cb 	bl	80071e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	791b      	ldrb	r3, [r3, #4]
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 f8c5 	bl	80071e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
      break;
 8006062:	e11b      	b.n	800629c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006064:	2101      	movs	r1, #1
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa79 	bl	800655e <USBH_SetAddress>
 800606c:	4603      	mov	r3, r0
 800606e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006070:	7bbb      	ldrb	r3, [r7, #14]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d130      	bne.n	80060d8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8006076:	2002      	movs	r0, #2
 8006078:	f001 fba2 	bl	80077c0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2203      	movs	r2, #3
 8006088:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7919      	ldrb	r1, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800609e:	9202      	str	r2, [sp, #8]
 80060a0:	2200      	movs	r2, #0
 80060a2:	9201      	str	r2, [sp, #4]
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	4603      	mov	r3, r0
 80060a8:	2280      	movs	r2, #128	@ 0x80
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 f848 	bl	8007140 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	7959      	ldrb	r1, [r3, #5]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80060c4:	9202      	str	r2, [sp, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	9201      	str	r2, [sp, #4]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	4603      	mov	r3, r0
 80060ce:	2200      	movs	r2, #0
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f001 f835 	bl	8007140 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80060d6:	e0e3      	b.n	80062a0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	2b03      	cmp	r3, #3
 80060dc:	f040 80e0 	bne.w	80062a0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	220d      	movs	r2, #13
 80060e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	705a      	strb	r2, [r3, #1]
      break;
 80060ec:	e0d8      	b.n	80062a0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80060ee:	2109      	movs	r1, #9
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f9a1 	bl	8006438 <USBH_Get_CfgDesc>
 80060f6:	4603      	mov	r3, r0
 80060f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80060fa:	7bbb      	ldrb	r3, [r7, #14]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d103      	bne.n	8006108 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2204      	movs	r2, #4
 8006104:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006106:	e0cd      	b.n	80062a4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	2b03      	cmp	r3, #3
 800610c:	f040 80ca 	bne.w	80062a4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006116:	3301      	adds	r3, #1
 8006118:	b2da      	uxtb	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006126:	2b03      	cmp	r3, #3
 8006128:	d903      	bls.n	8006132 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	220d      	movs	r2, #13
 800612e:	701a      	strb	r2, [r3, #0]
      break;
 8006130:	e0b8      	b.n	80062a4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	795b      	ldrb	r3, [r3, #5]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 f851 	bl	80071e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	791b      	ldrb	r3, [r3, #4]
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 f84b 	bl	80071e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	701a      	strb	r2, [r3, #0]
      break;
 8006156:	e0a5      	b.n	80062a4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800615e:	4619      	mov	r1, r3
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f969 	bl	8006438 <USBH_Get_CfgDesc>
 8006166:	4603      	mov	r3, r0
 8006168:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d103      	bne.n	8006178 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2205      	movs	r2, #5
 8006174:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006176:	e097      	b.n	80062a8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006178:	7bbb      	ldrb	r3, [r7, #14]
 800617a:	2b03      	cmp	r3, #3
 800617c:	f040 8094 	bne.w	80062a8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006186:	3301      	adds	r3, #1
 8006188:	b2da      	uxtb	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006196:	2b03      	cmp	r3, #3
 8006198:	d903      	bls.n	80061a2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	220d      	movs	r2, #13
 800619e:	701a      	strb	r2, [r3, #0]
      break;
 80061a0:	e082      	b.n	80062a8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	795b      	ldrb	r3, [r3, #5]
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 f819 	bl	80071e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	791b      	ldrb	r3, [r3, #4]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 f813 	bl	80071e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
      break;
 80061c6:	e06f      	b.n	80062a8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d019      	beq.n	8006206 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80061de:	23ff      	movs	r3, #255	@ 0xff
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f953 	bl	800648c <USBH_Get_StringDesc>
 80061e6:	4603      	mov	r3, r0
 80061e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d103      	bne.n	80061f8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2206      	movs	r2, #6
 80061f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80061f6:	e059      	b.n	80062ac <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d156      	bne.n	80062ac <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2206      	movs	r2, #6
 8006202:	705a      	strb	r2, [r3, #1]
      break;
 8006204:	e052      	b.n	80062ac <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2206      	movs	r2, #6
 800620a:	705a      	strb	r2, [r3, #1]
      break;
 800620c:	e04e      	b.n	80062ac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8006214:	2b00      	cmp	r3, #0
 8006216:	d019      	beq.n	800624c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006224:	23ff      	movs	r3, #255	@ 0xff
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f930 	bl	800648c <USBH_Get_StringDesc>
 800622c:	4603      	mov	r3, r0
 800622e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006230:	7bbb      	ldrb	r3, [r7, #14]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2207      	movs	r2, #7
 800623a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800623c:	e038      	b.n	80062b0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	2b03      	cmp	r3, #3
 8006242:	d135      	bne.n	80062b0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2207      	movs	r2, #7
 8006248:	705a      	strb	r2, [r3, #1]
      break;
 800624a:	e031      	b.n	80062b0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2207      	movs	r2, #7
 8006250:	705a      	strb	r2, [r3, #1]
      break;
 8006252:	e02d      	b.n	80062b0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800625a:	2b00      	cmp	r3, #0
 800625c:	d017      	beq.n	800628e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800626a:	23ff      	movs	r3, #255	@ 0xff
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f90d 	bl	800648c <USBH_Get_StringDesc>
 8006272:	4603      	mov	r3, r0
 8006274:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006276:	7bbb      	ldrb	r3, [r7, #14]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d102      	bne.n	8006282 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006280:	e018      	b.n	80062b4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d115      	bne.n	80062b4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	73fb      	strb	r3, [r7, #15]
      break;
 800628c:	e012      	b.n	80062b4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]
      break;
 8006292:	e00f      	b.n	80062b4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8006294:	bf00      	nop
 8006296:	e00e      	b.n	80062b6 <USBH_HandleEnum+0x3b6>
      break;
 8006298:	bf00      	nop
 800629a:	e00c      	b.n	80062b6 <USBH_HandleEnum+0x3b6>
      break;
 800629c:	bf00      	nop
 800629e:	e00a      	b.n	80062b6 <USBH_HandleEnum+0x3b6>
      break;
 80062a0:	bf00      	nop
 80062a2:	e008      	b.n	80062b6 <USBH_HandleEnum+0x3b6>
      break;
 80062a4:	bf00      	nop
 80062a6:	e006      	b.n	80062b6 <USBH_HandleEnum+0x3b6>
      break;
 80062a8:	bf00      	nop
 80062aa:	e004      	b.n	80062b6 <USBH_HandleEnum+0x3b6>
      break;
 80062ac:	bf00      	nop
 80062ae:	e002      	b.n	80062b6 <USBH_HandleEnum+0x3b6>
      break;
 80062b0:	bf00      	nop
 80062b2:	e000      	b.n	80062b6 <USBH_HandleEnum+0x3b6>
      break;
 80062b4:	bf00      	nop
  }
  return Status;
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f804 	bl	8006302 <USBH_HandleSof>
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b0b      	cmp	r3, #11
 8006312:	d10a      	bne.n	800632a <USBH_HandleSof+0x28>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800631a:	2b00      	cmp	r3, #0
 800631c:	d005      	beq.n	800632a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	4798      	blx	r3
  }
}
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006342:	bf00      	nop
}
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800635e:	bf00      	nop
}
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 f8be 	bl	800753a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	791b      	ldrb	r3, [r3, #4]
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 ff0b 	bl	80071e0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	795b      	ldrb	r3, [r3, #5]
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 ff05 	bl	80071e0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80063ec:	887b      	ldrh	r3, [r7, #2]
 80063ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063f2:	d901      	bls.n	80063f8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e01b      	b.n	8006430 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80063fe:	887b      	ldrh	r3, [r7, #2]
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	4613      	mov	r3, r2
 8006404:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006408:	2100      	movs	r1, #0
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f872 	bl	80064f4 <USBH_GetDescriptor>
 8006410:	4603      	mov	r3, r0
 8006412:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d109      	bne.n	800642e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006420:	887a      	ldrh	r2, [r7, #2]
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f929 	bl	800667c <USBH_ParseDevDesc>
 800642a:	4603      	mov	r3, r0
 800642c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af02      	add	r7, sp, #8
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	331c      	adds	r3, #28
 8006448:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800644a:	887b      	ldrh	r3, [r7, #2]
 800644c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006450:	d901      	bls.n	8006456 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006452:	2303      	movs	r3, #3
 8006454:	e016      	b.n	8006484 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006456:	887b      	ldrh	r3, [r7, #2]
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006460:	2100      	movs	r1, #0
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f846 	bl	80064f4 <USBH_GetDescriptor>
 8006468:	4603      	mov	r3, r0
 800646a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006472:	887b      	ldrh	r3, [r7, #2]
 8006474:	461a      	mov	r2, r3
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f9af 	bl	80067dc <USBH_ParseCfgDesc>
 800647e:	4603      	mov	r3, r0
 8006480:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006482:	7bfb      	ldrb	r3, [r7, #15]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	461a      	mov	r2, r3
 8006498:	460b      	mov	r3, r1
 800649a:	72fb      	strb	r3, [r7, #11]
 800649c:	4613      	mov	r3, r2
 800649e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80064a0:	893b      	ldrh	r3, [r7, #8]
 80064a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064a6:	d802      	bhi.n	80064ae <USBH_Get_StringDesc+0x22>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e01c      	b.n	80064ec <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80064b2:	7afb      	ldrb	r3, [r7, #11]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80064ba:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80064c2:	893b      	ldrh	r3, [r7, #8]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	460b      	mov	r3, r1
 80064c8:	2100      	movs	r1, #0
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f812 	bl	80064f4 <USBH_GetDescriptor>
 80064d0:	4603      	mov	r3, r0
 80064d2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d107      	bne.n	80064ea <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80064e0:	893a      	ldrh	r2, [r7, #8]
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fb8d 	bl	8006c04 <USBH_ParseStringDesc>
  }

  return status;
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	607b      	str	r3, [r7, #4]
 80064fe:	460b      	mov	r3, r1
 8006500:	72fb      	strb	r3, [r7, #11]
 8006502:	4613      	mov	r3, r2
 8006504:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	789b      	ldrb	r3, [r3, #2]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d11c      	bne.n	8006548 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800650e:	7afb      	ldrb	r3, [r7, #11]
 8006510:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006514:	b2da      	uxtb	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2206      	movs	r2, #6
 800651e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	893a      	ldrh	r2, [r7, #8]
 8006524:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006526:	893b      	ldrh	r3, [r7, #8]
 8006528:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800652c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006530:	d104      	bne.n	800653c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f240 4209 	movw	r2, #1033	@ 0x409
 8006538:	829a      	strh	r2, [r3, #20]
 800653a:	e002      	b.n	8006542 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8b3a      	ldrh	r2, [r7, #24]
 8006546:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006548:	8b3b      	ldrh	r3, [r7, #24]
 800654a:	461a      	mov	r2, r3
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 fba5 	bl	8006c9e <USBH_CtlReq>
 8006554:	4603      	mov	r3, r0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	789b      	ldrb	r3, [r3, #2]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d10f      	bne.n	8006592 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2205      	movs	r2, #5
 800657c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	b29a      	uxth	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006592:	2200      	movs	r2, #0
 8006594:	2100      	movs	r1, #0
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fb81 	bl	8006c9e <USBH_CtlReq>
 800659c:	4603      	mov	r3, r0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	789b      	ldrb	r3, [r3, #2]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d10e      	bne.n	80065d8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2209      	movs	r2, #9
 80065c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	887a      	ldrh	r2, [r7, #2]
 80065ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80065d8:	2200      	movs	r2, #0
 80065da:	2100      	movs	r1, #0
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fb5e 	bl	8006c9e <USBH_CtlReq>
 80065e2:	4603      	mov	r3, r0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	789b      	ldrb	r3, [r3, #2]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d10f      	bne.n	8006620 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2203      	movs	r2, #3
 800660a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	b29a      	uxth	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006620:	2200      	movs	r2, #0
 8006622:	2100      	movs	r1, #0
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fb3a 	bl	8006c9e <USBH_CtlReq>
 800662a:	4603      	mov	r3, r0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	789b      	ldrb	r3, [r3, #2]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d10f      	bne.n	8006668 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	b29a      	uxth	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006668:	2200      	movs	r2, #0
 800666a:	2100      	movs	r1, #0
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fb16 	bl	8006c9e <USBH_CtlReq>
 8006672:	4603      	mov	r3, r0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006690:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800669c:	2302      	movs	r3, #2
 800669e:	e094      	b.n	80067ca <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	781a      	ldrb	r2, [r3, #0]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	785a      	ldrb	r2, [r3, #1]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	3302      	adds	r3, #2
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	3303      	adds	r3, #3
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	4313      	orrs	r3, r2
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	791a      	ldrb	r2, [r3, #4]
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	795a      	ldrb	r2, [r3, #5]
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	799a      	ldrb	r2, [r3, #6]
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	79da      	ldrb	r2, [r3, #7]
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d004      	beq.n	80066fe <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d11b      	bne.n	8006736 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	79db      	ldrb	r3, [r3, #7]
 8006702:	2b20      	cmp	r3, #32
 8006704:	dc0f      	bgt.n	8006726 <USBH_ParseDevDesc+0xaa>
 8006706:	2b08      	cmp	r3, #8
 8006708:	db0f      	blt.n	800672a <USBH_ParseDevDesc+0xae>
 800670a:	3b08      	subs	r3, #8
 800670c:	4a32      	ldr	r2, [pc, #200]	@ (80067d8 <USBH_ParseDevDesc+0x15c>)
 800670e:	fa22 f303 	lsr.w	r3, r2, r3
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	bf14      	ite	ne
 800671a:	2301      	movne	r3, #1
 800671c:	2300      	moveq	r3, #0
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d106      	bne.n	8006732 <USBH_ParseDevDesc+0xb6>
 8006724:	e001      	b.n	800672a <USBH_ParseDevDesc+0xae>
 8006726:	2b40      	cmp	r3, #64	@ 0x40
 8006728:	d003      	beq.n	8006732 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2208      	movs	r2, #8
 800672e:	71da      	strb	r2, [r3, #7]
        break;
 8006730:	e000      	b.n	8006734 <USBH_ParseDevDesc+0xb8>
        break;
 8006732:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8006734:	e00e      	b.n	8006754 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800673c:	2b02      	cmp	r3, #2
 800673e:	d107      	bne.n	8006750 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	79db      	ldrb	r3, [r3, #7]
 8006744:	2b08      	cmp	r3, #8
 8006746:	d005      	beq.n	8006754 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2208      	movs	r2, #8
 800674c:	71da      	strb	r2, [r3, #7]
 800674e:	e001      	b.n	8006754 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8006750:	2303      	movs	r3, #3
 8006752:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	2b08      	cmp	r3, #8
 8006758:	d936      	bls.n	80067c8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	3308      	adds	r3, #8
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	3309      	adds	r3, #9
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	b29b      	uxth	r3, r3
 800676c:	4313      	orrs	r3, r2
 800676e:	b29a      	uxth	r2, r3
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	330a      	adds	r3, #10
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	330b      	adds	r3, #11
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	b29b      	uxth	r3, r3
 8006786:	4313      	orrs	r3, r2
 8006788:	b29a      	uxth	r2, r3
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	330c      	adds	r3, #12
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	330d      	adds	r3, #13
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	021b      	lsls	r3, r3, #8
 800679e:	b29b      	uxth	r3, r3
 80067a0:	4313      	orrs	r3, r2
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	7b9a      	ldrb	r2, [r3, #14]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	7bda      	ldrb	r2, [r3, #15]
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	7c1a      	ldrb	r2, [r3, #16]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	7c5a      	ldrb	r2, [r3, #17]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	01000101 	.word	0x01000101

080067dc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08c      	sub	sp, #48	@ 0x30
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	4613      	mov	r3, r2
 80067e8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80067f0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800680a:	2302      	movs	r3, #2
 800680c:	e0da      	b.n	80069c4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	781a      	ldrb	r2, [r3, #0]
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	785a      	ldrb	r2, [r3, #1]
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	3302      	adds	r3, #2
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	3303      	adds	r3, #3
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	b29b      	uxth	r3, r3
 8006834:	4313      	orrs	r3, r2
 8006836:	b29b      	uxth	r3, r3
 8006838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800683c:	bf28      	it	cs
 800683e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8006842:	b29a      	uxth	r2, r3
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	791a      	ldrb	r2, [r3, #4]
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	795a      	ldrb	r2, [r3, #5]
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	799a      	ldrb	r2, [r3, #6]
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	79da      	ldrb	r2, [r3, #7]
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	7a1a      	ldrb	r2, [r3, #8]
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b09      	cmp	r3, #9
 8006876:	d002      	beq.n	800687e <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	2209      	movs	r2, #9
 800687c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800687e:	88fb      	ldrh	r3, [r7, #6]
 8006880:	2b09      	cmp	r3, #9
 8006882:	f240 809d 	bls.w	80069c0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8006886:	2309      	movs	r3, #9
 8006888:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800688e:	e081      	b.n	8006994 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006890:	f107 0316 	add.w	r3, r7, #22
 8006894:	4619      	mov	r1, r3
 8006896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006898:	f000 f9e7 	bl	8006c6a <USBH_GetNextDesc>
 800689c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800689e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d176      	bne.n	8006994 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80068a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2b09      	cmp	r3, #9
 80068ac:	d002      	beq.n	80068b4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80068ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b0:	2209      	movs	r2, #9
 80068b2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80068b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068b8:	221a      	movs	r2, #26
 80068ba:	fb02 f303 	mul.w	r3, r2, r3
 80068be:	3308      	adds	r3, #8
 80068c0:	6a3a      	ldr	r2, [r7, #32]
 80068c2:	4413      	add	r3, r2
 80068c4:	3302      	adds	r3, #2
 80068c6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80068c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068ca:	69f8      	ldr	r0, [r7, #28]
 80068cc:	f000 f87e 	bl	80069cc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80068da:	e043      	b.n	8006964 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80068dc:	f107 0316 	add.w	r3, r7, #22
 80068e0:	4619      	mov	r1, r3
 80068e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068e4:	f000 f9c1 	bl	8006c6a <USBH_GetNextDesc>
 80068e8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80068ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b05      	cmp	r3, #5
 80068f0:	d138      	bne.n	8006964 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	795b      	ldrb	r3, [r3, #5]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d113      	bne.n	8006922 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d003      	beq.n	800690a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	799b      	ldrb	r3, [r3, #6]
 8006906:	2b03      	cmp	r3, #3
 8006908:	d10b      	bne.n	8006922 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	79db      	ldrb	r3, [r3, #7]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10b      	bne.n	800692a <USBH_ParseCfgDesc+0x14e>
 8006912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b09      	cmp	r3, #9
 8006918:	d007      	beq.n	800692a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800691a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691c:	2209      	movs	r2, #9
 800691e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006920:	e003      	b.n	800692a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006924:	2207      	movs	r2, #7
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	e000      	b.n	800692c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800692a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800692c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006930:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006934:	3201      	adds	r2, #1
 8006936:	00d2      	lsls	r2, r2, #3
 8006938:	211a      	movs	r1, #26
 800693a:	fb01 f303 	mul.w	r3, r1, r3
 800693e:	4413      	add	r3, r2
 8006940:	3308      	adds	r3, #8
 8006942:	6a3a      	ldr	r2, [r7, #32]
 8006944:	4413      	add	r3, r2
 8006946:	3304      	adds	r3, #4
 8006948:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800694a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800694c:	69b9      	ldr	r1, [r7, #24]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f870 	bl	8006a34 <USBH_ParseEPDesc>
 8006954:	4603      	mov	r3, r0
 8006956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800695a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800695e:	3301      	adds	r3, #1
 8006960:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	791b      	ldrb	r3, [r3, #4]
 8006968:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800696c:	429a      	cmp	r2, r3
 800696e:	d204      	bcs.n	800697a <USBH_ParseCfgDesc+0x19e>
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	885a      	ldrh	r2, [r3, #2]
 8006974:	8afb      	ldrh	r3, [r7, #22]
 8006976:	429a      	cmp	r2, r3
 8006978:	d8b0      	bhi.n	80068dc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	791b      	ldrb	r3, [r3, #4]
 800697e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006982:	429a      	cmp	r2, r3
 8006984:	d201      	bcs.n	800698a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8006986:	2303      	movs	r3, #3
 8006988:	e01c      	b.n	80069c4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800698a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800698e:	3301      	adds	r3, #1
 8006990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006998:	2b01      	cmp	r3, #1
 800699a:	d805      	bhi.n	80069a8 <USBH_ParseCfgDesc+0x1cc>
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	885a      	ldrh	r2, [r3, #2]
 80069a0:	8afb      	ldrh	r3, [r7, #22]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	f63f af74 	bhi.w	8006890 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	791b      	ldrb	r3, [r3, #4]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	bf28      	it	cs
 80069b0:	2302      	movcs	r3, #2
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d201      	bcs.n	80069c0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80069bc:	2303      	movs	r3, #3
 80069be:	e001      	b.n	80069c4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80069c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3730      	adds	r7, #48	@ 0x30
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781a      	ldrb	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	785a      	ldrb	r2, [r3, #1]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	789a      	ldrb	r2, [r3, #2]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	78da      	ldrb	r2, [r3, #3]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	3304      	adds	r3, #4
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	bf28      	it	cs
 8006a00:	2302      	movcs	r3, #2
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	795a      	ldrb	r2, [r3, #5]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	799a      	ldrb	r2, [r3, #6]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	79da      	ldrb	r2, [r3, #7]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	7a1a      	ldrb	r2, [r3, #8]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	721a      	strb	r2, [r3, #8]
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	781a      	ldrb	r2, [r3, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	785a      	ldrb	r2, [r3, #1]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	789a      	ldrb	r2, [r3, #2]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	78da      	ldrb	r2, [r3, #3]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3304      	adds	r3, #4
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3305      	adds	r3, #5
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	4313      	orrs	r3, r2
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	799a      	ldrb	r2, [r3, #6]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	889b      	ldrh	r3, [r3, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d009      	beq.n	8006aa2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8006a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a96:	d804      	bhi.n	8006aa2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8006a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aa0:	d901      	bls.n	8006aa6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d136      	bne.n	8006b1e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	78db      	ldrb	r3, [r3, #3]
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d108      	bne.n	8006ace <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	889b      	ldrh	r3, [r3, #4]
 8006ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac4:	f240 8097 	bls.w	8006bf6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	75fb      	strb	r3, [r7, #23]
 8006acc:	e093      	b.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	78db      	ldrb	r3, [r3, #3]
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d107      	bne.n	8006aea <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	889b      	ldrh	r3, [r3, #4]
 8006ade:	2b40      	cmp	r3, #64	@ 0x40
 8006ae0:	f240 8089 	bls.w	8006bf6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	75fb      	strb	r3, [r7, #23]
 8006ae8:	e085      	b.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	78db      	ldrb	r3, [r3, #3]
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d005      	beq.n	8006b02 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	78db      	ldrb	r3, [r3, #3]
 8006afa:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d10a      	bne.n	8006b18 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	799b      	ldrb	r3, [r3, #6]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <USBH_ParseEPDesc+0xde>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	799b      	ldrb	r3, [r3, #6]
 8006b0e:	2b10      	cmp	r3, #16
 8006b10:	d970      	bls.n	8006bf4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8006b12:	2303      	movs	r3, #3
 8006b14:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006b16:	e06d      	b.n	8006bf4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	75fb      	strb	r3, [r7, #23]
 8006b1c:	e06b      	b.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d13c      	bne.n	8006ba2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	78db      	ldrb	r3, [r3, #3]
 8006b2c:	f003 0303 	and.w	r3, r3, #3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d005      	beq.n	8006b40 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	78db      	ldrb	r3, [r3, #3]
 8006b38:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d106      	bne.n	8006b4e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	889b      	ldrh	r3, [r3, #4]
 8006b44:	2b40      	cmp	r3, #64	@ 0x40
 8006b46:	d956      	bls.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8006b4c:	e053      	b.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	78db      	ldrb	r3, [r3, #3]
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d10e      	bne.n	8006b78 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	799b      	ldrb	r3, [r3, #6]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8006b66:	2b10      	cmp	r3, #16
 8006b68:	d803      	bhi.n	8006b72 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8006b6e:	2b40      	cmp	r3, #64	@ 0x40
 8006b70:	d941      	bls.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006b72:	2303      	movs	r3, #3
 8006b74:	75fb      	strb	r3, [r7, #23]
 8006b76:	e03e      	b.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	78db      	ldrb	r3, [r3, #3]
 8006b7c:	f003 0303 	and.w	r3, r3, #3
 8006b80:	2b03      	cmp	r3, #3
 8006b82:	d10b      	bne.n	8006b9c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	799b      	ldrb	r3, [r3, #6]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d004      	beq.n	8006b96 <USBH_ParseEPDesc+0x162>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	889b      	ldrh	r3, [r3, #4]
 8006b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b94:	d32f      	bcc.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006b96:	2303      	movs	r3, #3
 8006b98:	75fb      	strb	r3, [r7, #23]
 8006b9a:	e02c      	b.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	75fb      	strb	r3, [r7, #23]
 8006ba0:	e029      	b.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d120      	bne.n	8006bee <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	78db      	ldrb	r3, [r3, #3]
 8006bb0:	f003 0303 	and.w	r3, r3, #3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d106      	bne.n	8006bc6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	889b      	ldrh	r3, [r3, #4]
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d01a      	beq.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	75fb      	strb	r3, [r7, #23]
 8006bc4:	e017      	b.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	78db      	ldrb	r3, [r3, #3]
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d10a      	bne.n	8006be8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	799b      	ldrb	r3, [r3, #6]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <USBH_ParseEPDesc+0x1ae>
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	889b      	ldrh	r3, [r3, #4]
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d909      	bls.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8006be2:	2303      	movs	r3, #3
 8006be4:	75fb      	strb	r3, [r7, #23]
 8006be6:	e006      	b.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8006be8:	2303      	movs	r3, #3
 8006bea:	75fb      	strb	r3, [r7, #23]
 8006bec:	e003      	b.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	75fb      	strb	r3, [r7, #23]
 8006bf2:	e000      	b.n	8006bf6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006bf4:	bf00      	nop
  }

  return status;
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	371c      	adds	r7, #28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d120      	bne.n	8006c5e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	1e9a      	subs	r2, r3, #2
 8006c22:	88fb      	ldrh	r3, [r7, #6]
 8006c24:	4293      	cmp	r3, r2
 8006c26:	bf28      	it	cs
 8006c28:	4613      	movcs	r3, r2
 8006c2a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3302      	adds	r3, #2
 8006c30:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006c32:	2300      	movs	r3, #0
 8006c34:	82fb      	strh	r3, [r7, #22]
 8006c36:	e00b      	b.n	8006c50 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006c38:	8afb      	ldrh	r3, [r7, #22]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	781a      	ldrb	r2, [r3, #0]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	3301      	adds	r3, #1
 8006c48:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006c4a:	8afb      	ldrh	r3, [r7, #22]
 8006c4c:	3302      	adds	r3, #2
 8006c4e:	82fb      	strh	r3, [r7, #22]
 8006c50:	8afa      	ldrh	r2, [r7, #22]
 8006c52:	8abb      	ldrh	r3, [r7, #20]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d3ef      	bcc.n	8006c38 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
  }
}
 8006c5e:	bf00      	nop
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	7812      	ldrb	r2, [r2, #0]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006c90:	68fb      	ldr	r3, [r7, #12]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b086      	sub	sp, #24
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006cac:	2301      	movs	r3, #1
 8006cae:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	789b      	ldrb	r3, [r3, #2]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d002      	beq.n	8006cbe <USBH_CtlReq+0x20>
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d00f      	beq.n	8006cdc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006cbc:	e027      	b.n	8006d0e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	88fa      	ldrh	r2, [r7, #6]
 8006cc8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cda:	e018      	b.n	8006d0e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 f81b 	bl	8006d18 <USBH_HandleControl>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <USBH_CtlReq+0x54>
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d106      	bne.n	8006d00 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	761a      	strb	r2, [r3, #24]
      break;
 8006cfe:	e005      	b.n	8006d0c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d102      	bne.n	8006d0c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	709a      	strb	r2, [r3, #2]
      break;
 8006d0c:	bf00      	nop
  }
  return status;
 8006d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d20:	2301      	movs	r3, #1
 8006d22:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7e1b      	ldrb	r3, [r3, #24]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	2b0a      	cmp	r3, #10
 8006d30:	f200 8156 	bhi.w	8006fe0 <USBH_HandleControl+0x2c8>
 8006d34:	a201      	add	r2, pc, #4	@ (adr r2, 8006d3c <USBH_HandleControl+0x24>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006d69 	.word	0x08006d69
 8006d40:	08006d83 	.word	0x08006d83
 8006d44:	08006ded 	.word	0x08006ded
 8006d48:	08006e13 	.word	0x08006e13
 8006d4c:	08006e4b 	.word	0x08006e4b
 8006d50:	08006e75 	.word	0x08006e75
 8006d54:	08006ec7 	.word	0x08006ec7
 8006d58:	08006ee9 	.word	0x08006ee9
 8006d5c:	08006f25 	.word	0x08006f25
 8006d60:	08006f4b 	.word	0x08006f4b
 8006d64:	08006f89 	.word	0x08006f89
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f103 0110 	add.w	r1, r3, #16
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	795b      	ldrb	r3, [r3, #5]
 8006d72:	461a      	mov	r2, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f943 	bl	8007000 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	761a      	strb	r2, [r3, #24]
      break;
 8006d80:	e139      	b.n	8006ff6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	795b      	ldrb	r3, [r3, #5]
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fcc5 	bl	8007718 <USBH_LL_GetURBState>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d11e      	bne.n	8006dd6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	7c1b      	ldrb	r3, [r3, #16]
 8006d9c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006da0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8adb      	ldrh	r3, [r3, #22]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006daa:	7b7b      	ldrb	r3, [r7, #13]
 8006dac:	2b80      	cmp	r3, #128	@ 0x80
 8006dae:	d103      	bne.n	8006db8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2203      	movs	r2, #3
 8006db4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006db6:	e115      	b.n	8006fe4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2205      	movs	r2, #5
 8006dbc:	761a      	strb	r2, [r3, #24]
      break;
 8006dbe:	e111      	b.n	8006fe4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006dc0:	7b7b      	ldrb	r3, [r7, #13]
 8006dc2:	2b80      	cmp	r3, #128	@ 0x80
 8006dc4:	d103      	bne.n	8006dce <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2209      	movs	r2, #9
 8006dca:	761a      	strb	r2, [r3, #24]
      break;
 8006dcc:	e10a      	b.n	8006fe4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	761a      	strb	r2, [r3, #24]
      break;
 8006dd4:	e106      	b.n	8006fe4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d003      	beq.n	8006de4 <USBH_HandleControl+0xcc>
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	f040 8100 	bne.w	8006fe4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	220b      	movs	r2, #11
 8006de8:	761a      	strb	r2, [r3, #24]
      break;
 8006dea:	e0fb      	b.n	8006fe4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6899      	ldr	r1, [r3, #8]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	899a      	ldrh	r2, [r3, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	791b      	ldrb	r3, [r3, #4]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f93a 	bl	800707e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2204      	movs	r2, #4
 8006e0e:	761a      	strb	r2, [r3, #24]
      break;
 8006e10:	e0f1      	b.n	8006ff6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	791b      	ldrb	r3, [r3, #4]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fc7d 	bl	8007718 <USBH_LL_GetURBState>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d102      	bne.n	8006e2e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2209      	movs	r2, #9
 8006e2c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	d102      	bne.n	8006e3a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006e34:	2303      	movs	r3, #3
 8006e36:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006e38:	e0d6      	b.n	8006fe8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	f040 80d3 	bne.w	8006fe8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	220b      	movs	r2, #11
 8006e46:	761a      	strb	r2, [r3, #24]
      break;
 8006e48:	e0ce      	b.n	8006fe8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6899      	ldr	r1, [r3, #8]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	899a      	ldrh	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	795b      	ldrb	r3, [r3, #5]
 8006e56:	2001      	movs	r0, #1
 8006e58:	9000      	str	r0, [sp, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f8ea 	bl	8007034 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2206      	movs	r2, #6
 8006e70:	761a      	strb	r2, [r3, #24]
      break;
 8006e72:	e0c0      	b.n	8006ff6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	795b      	ldrb	r3, [r3, #5]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fc4c 	bl	8007718 <USBH_LL_GetURBState>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d103      	bne.n	8006e92 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2207      	movs	r2, #7
 8006e8e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006e90:	e0ac      	b.n	8006fec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b05      	cmp	r3, #5
 8006e96:	d105      	bne.n	8006ea4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	220c      	movs	r2, #12
 8006e9c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea2:	e0a3      	b.n	8006fec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d103      	bne.n	8006eb2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2205      	movs	r2, #5
 8006eae:	761a      	strb	r2, [r3, #24]
      break;
 8006eb0:	e09c      	b.n	8006fec <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	f040 8099 	bne.w	8006fec <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	220b      	movs	r2, #11
 8006ebe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec4:	e092      	b.n	8006fec <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	791b      	ldrb	r3, [r3, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2100      	movs	r1, #0
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f8d5 	bl	800707e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2208      	movs	r2, #8
 8006ee4:	761a      	strb	r2, [r3, #24]

      break;
 8006ee6:	e086      	b.n	8006ff6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	791b      	ldrb	r3, [r3, #4]
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fc12 	bl	8007718 <USBH_LL_GetURBState>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d105      	bne.n	8006f0a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	220d      	movs	r2, #13
 8006f02:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006f08:	e072      	b.n	8006ff0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d103      	bne.n	8006f18 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	220b      	movs	r2, #11
 8006f14:	761a      	strb	r2, [r3, #24]
      break;
 8006f16:	e06b      	b.n	8006ff0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	2b05      	cmp	r3, #5
 8006f1c:	d168      	bne.n	8006ff0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	73fb      	strb	r3, [r7, #15]
      break;
 8006f22:	e065      	b.n	8006ff0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	795b      	ldrb	r3, [r3, #5]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	9200      	str	r2, [sp, #0]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f87f 	bl	8007034 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	220a      	movs	r2, #10
 8006f46:	761a      	strb	r2, [r3, #24]
      break;
 8006f48:	e055      	b.n	8006ff6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	795b      	ldrb	r3, [r3, #5]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fbe1 	bl	8007718 <USBH_LL_GetURBState>
 8006f56:	4603      	mov	r3, r0
 8006f58:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d105      	bne.n	8006f6c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	220d      	movs	r2, #13
 8006f68:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006f6a:	e043      	b.n	8006ff4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d103      	bne.n	8006f7a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2209      	movs	r2, #9
 8006f76:	761a      	strb	r2, [r3, #24]
      break;
 8006f78:	e03c      	b.n	8006ff4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006f7a:	7bbb      	ldrb	r3, [r7, #14]
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	d139      	bne.n	8006ff4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	220b      	movs	r2, #11
 8006f84:	761a      	strb	r2, [r3, #24]
      break;
 8006f86:	e035      	b.n	8006ff4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	7e5b      	ldrb	r3, [r3, #25]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	765a      	strb	r2, [r3, #25]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	7e5b      	ldrb	r3, [r3, #25]
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d806      	bhi.n	8006faa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006fa8:	e025      	b.n	8006ff6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006fb0:	2106      	movs	r1, #6
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	795b      	ldrb	r3, [r3, #5]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f90c 	bl	80071e0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	791b      	ldrb	r3, [r3, #4]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f906 	bl	80071e0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006fda:	2302      	movs	r3, #2
 8006fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8006fde:	e00a      	b.n	8006ff6 <USBH_HandleControl+0x2de>

    default:
      break;
 8006fe0:	bf00      	nop
 8006fe2:	e008      	b.n	8006ff6 <USBH_HandleControl+0x2de>
      break;
 8006fe4:	bf00      	nop
 8006fe6:	e006      	b.n	8006ff6 <USBH_HandleControl+0x2de>
      break;
 8006fe8:	bf00      	nop
 8006fea:	e004      	b.n	8006ff6 <USBH_HandleControl+0x2de>
      break;
 8006fec:	bf00      	nop
 8006fee:	e002      	b.n	8006ff6 <USBH_HandleControl+0x2de>
      break;
 8006ff0:	bf00      	nop
 8006ff2:	e000      	b.n	8006ff6 <USBH_HandleControl+0x2de>
      break;
 8006ff4:	bf00      	nop
  }

  return status;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af04      	add	r7, sp, #16
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4613      	mov	r3, r2
 800700c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800700e:	79f9      	ldrb	r1, [r7, #7]
 8007010:	2300      	movs	r3, #0
 8007012:	9303      	str	r3, [sp, #12]
 8007014:	2308      	movs	r3, #8
 8007016:	9302      	str	r3, [sp, #8]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	2300      	movs	r3, #0
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	2300      	movs	r3, #0
 8007022:	2200      	movs	r2, #0
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f000 fb46 	bl	80076b6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af04      	add	r7, sp, #16
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	4611      	mov	r1, r2
 8007040:	461a      	mov	r2, r3
 8007042:	460b      	mov	r3, r1
 8007044:	80fb      	strh	r3, [r7, #6]
 8007046:	4613      	mov	r3, r2
 8007048:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007058:	7979      	ldrb	r1, [r7, #5]
 800705a:	7e3b      	ldrb	r3, [r7, #24]
 800705c:	9303      	str	r3, [sp, #12]
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	9302      	str	r3, [sp, #8]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	2301      	movs	r3, #1
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	2300      	movs	r3, #0
 800706c:	2200      	movs	r2, #0
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fb21 	bl	80076b6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b088      	sub	sp, #32
 8007082:	af04      	add	r7, sp, #16
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	4611      	mov	r1, r2
 800708a:	461a      	mov	r2, r3
 800708c:	460b      	mov	r3, r1
 800708e:	80fb      	strh	r3, [r7, #6]
 8007090:	4613      	mov	r3, r2
 8007092:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007094:	7979      	ldrb	r1, [r7, #5]
 8007096:	2300      	movs	r3, #0
 8007098:	9303      	str	r3, [sp, #12]
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	9302      	str	r3, [sp, #8]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	2301      	movs	r3, #1
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	2300      	movs	r3, #0
 80070a8:	2201      	movs	r2, #1
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 fb03 	bl	80076b6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80070b0:	2300      	movs	r3, #0

}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b088      	sub	sp, #32
 80070be:	af04      	add	r7, sp, #16
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	4611      	mov	r1, r2
 80070c6:	461a      	mov	r2, r3
 80070c8:	460b      	mov	r3, r1
 80070ca:	80fb      	strh	r3, [r7, #6]
 80070cc:	4613      	mov	r3, r2
 80070ce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80070de:	7979      	ldrb	r1, [r7, #5]
 80070e0:	7e3b      	ldrb	r3, [r7, #24]
 80070e2:	9303      	str	r3, [sp, #12]
 80070e4:	88fb      	ldrh	r3, [r7, #6]
 80070e6:	9302      	str	r3, [sp, #8]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	9301      	str	r3, [sp, #4]
 80070ec:	2301      	movs	r3, #1
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	2302      	movs	r3, #2
 80070f2:	2200      	movs	r2, #0
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fade 	bl	80076b6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af04      	add	r7, sp, #16
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	4611      	mov	r1, r2
 8007110:	461a      	mov	r2, r3
 8007112:	460b      	mov	r3, r1
 8007114:	80fb      	strh	r3, [r7, #6]
 8007116:	4613      	mov	r3, r2
 8007118:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800711a:	7979      	ldrb	r1, [r7, #5]
 800711c:	2300      	movs	r3, #0
 800711e:	9303      	str	r3, [sp, #12]
 8007120:	88fb      	ldrh	r3, [r7, #6]
 8007122:	9302      	str	r3, [sp, #8]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	2301      	movs	r3, #1
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	2302      	movs	r3, #2
 800712e:	2201      	movs	r2, #1
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 fac0 	bl	80076b6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af04      	add	r7, sp, #16
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	4608      	mov	r0, r1
 800714a:	4611      	mov	r1, r2
 800714c:	461a      	mov	r2, r3
 800714e:	4603      	mov	r3, r0
 8007150:	70fb      	strb	r3, [r7, #3]
 8007152:	460b      	mov	r3, r1
 8007154:	70bb      	strb	r3, [r7, #2]
 8007156:	4613      	mov	r3, r2
 8007158:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800715a:	7878      	ldrb	r0, [r7, #1]
 800715c:	78ba      	ldrb	r2, [r7, #2]
 800715e:	78f9      	ldrb	r1, [r7, #3]
 8007160:	8b3b      	ldrh	r3, [r7, #24]
 8007162:	9302      	str	r3, [sp, #8]
 8007164:	7d3b      	ldrb	r3, [r7, #20]
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	7c3b      	ldrb	r3, [r7, #16]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	4603      	mov	r3, r0
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fa53 	bl	800761a <USBH_LL_OpenPipe>

  return USBH_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	460b      	mov	r3, r1
 8007188:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fa72 	bl	8007678 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	460b      	mov	r3, r1
 80071a8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f836 	bl	800721c <USBH_GetFreePipe>
 80071b0:	4603      	mov	r3, r0
 80071b2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80071b4:	89fb      	ldrh	r3, [r7, #14]
 80071b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00a      	beq.n	80071d4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80071be:	78fa      	ldrb	r2, [r7, #3]
 80071c0:	89fb      	ldrh	r3, [r7, #14]
 80071c2:	f003 030f 	and.w	r3, r3, #15
 80071c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	33e0      	adds	r3, #224	@ 0xe0
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	440b      	add	r3, r1
 80071d2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80071d4:	89fb      	ldrh	r3, [r7, #14]
 80071d6:	b2db      	uxtb	r3, r3
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	2b0f      	cmp	r3, #15
 80071f0:	d80d      	bhi.n	800720e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80071f2:	78fb      	ldrb	r3, [r7, #3]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	33e0      	adds	r3, #224	@ 0xe0
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	78fb      	ldrb	r3, [r7, #3]
 8007200:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	33e0      	adds	r3, #224	@ 0xe0
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	440b      	add	r3, r1
 800720c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007228:	2300      	movs	r3, #0
 800722a:	73fb      	strb	r3, [r7, #15]
 800722c:	e00f      	b.n	800724e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	33e0      	adds	r3, #224	@ 0xe0
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d102      	bne.n	8007248 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	b29b      	uxth	r3, r3
 8007246:	e007      	b.n	8007258 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	3301      	adds	r3, #1
 800724c:	73fb      	strb	r3, [r7, #15]
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	2b0f      	cmp	r3, #15
 8007252:	d9ec      	bls.n	800722e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007254:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8007258:	4618      	mov	r0, r3
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007268:	2201      	movs	r2, #1
 800726a:	490e      	ldr	r1, [pc, #56]	@ (80072a4 <MX_USB_HOST_Init+0x40>)
 800726c:	480e      	ldr	r0, [pc, #56]	@ (80072a8 <MX_USB_HOST_Init+0x44>)
 800726e:	f7fe fb15 	bl	800589c <USBH_Init>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007278:	f7f9 faa4 	bl	80007c4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800727c:	490b      	ldr	r1, [pc, #44]	@ (80072ac <MX_USB_HOST_Init+0x48>)
 800727e:	480a      	ldr	r0, [pc, #40]	@ (80072a8 <MX_USB_HOST_Init+0x44>)
 8007280:	f7fe fbb9 	bl	80059f6 <USBH_RegisterClass>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800728a:	f7f9 fa9b 	bl	80007c4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800728e:	4806      	ldr	r0, [pc, #24]	@ (80072a8 <MX_USB_HOST_Init+0x44>)
 8007290:	f7fe fc3d 	bl	8005b0e <USBH_Start>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800729a:	f7f9 fa93 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800729e:	bf00      	nop
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	080072c5 	.word	0x080072c5
 80072a8:	200000f8 	.word	0x200000f8
 80072ac:	20000010 	.word	0x20000010

080072b0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80072b4:	4802      	ldr	r0, [pc, #8]	@ (80072c0 <MX_USB_HOST_Process+0x10>)
 80072b6:	f7fe fc3b 	bl	8005b30 <USBH_Process>
}
 80072ba:	bf00      	nop
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	200000f8 	.word	0x200000f8

080072c4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d819      	bhi.n	800730c <USBH_UserProcess+0x48>
 80072d8:	a201      	add	r2, pc, #4	@ (adr r2, 80072e0 <USBH_UserProcess+0x1c>)
 80072da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072de:	bf00      	nop
 80072e0:	0800730d 	.word	0x0800730d
 80072e4:	080072fd 	.word	0x080072fd
 80072e8:	0800730d 	.word	0x0800730d
 80072ec:	08007305 	.word	0x08007305
 80072f0:	080072f5 	.word	0x080072f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80072f4:	4b09      	ldr	r3, [pc, #36]	@ (800731c <USBH_UserProcess+0x58>)
 80072f6:	2203      	movs	r2, #3
 80072f8:	701a      	strb	r2, [r3, #0]
  break;
 80072fa:	e008      	b.n	800730e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80072fc:	4b07      	ldr	r3, [pc, #28]	@ (800731c <USBH_UserProcess+0x58>)
 80072fe:	2202      	movs	r2, #2
 8007300:	701a      	strb	r2, [r3, #0]
  break;
 8007302:	e004      	b.n	800730e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007304:	4b05      	ldr	r3, [pc, #20]	@ (800731c <USBH_UserProcess+0x58>)
 8007306:	2201      	movs	r2, #1
 8007308:	701a      	strb	r2, [r3, #0]
  break;
 800730a:	e000      	b.n	800730e <USBH_UserProcess+0x4a>

  default:
  break;
 800730c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	200004d0 	.word	0x200004d0

08007320 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	@ 0x28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007328:	f107 0314 	add.w	r3, r7, #20
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	605a      	str	r2, [r3, #4]
 8007332:	609a      	str	r2, [r3, #8]
 8007334:	60da      	str	r2, [r3, #12]
 8007336:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007340:	d147      	bne.n	80073d2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007342:	2300      	movs	r3, #0
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	4b25      	ldr	r3, [pc, #148]	@ (80073dc <HAL_HCD_MspInit+0xbc>)
 8007348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800734a:	4a24      	ldr	r2, [pc, #144]	@ (80073dc <HAL_HCD_MspInit+0xbc>)
 800734c:	f043 0301 	orr.w	r3, r3, #1
 8007350:	6313      	str	r3, [r2, #48]	@ 0x30
 8007352:	4b22      	ldr	r3, [pc, #136]	@ (80073dc <HAL_HCD_MspInit+0xbc>)
 8007354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	613b      	str	r3, [r7, #16]
 800735c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800735e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007364:	2300      	movs	r3, #0
 8007366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007368:	2300      	movs	r3, #0
 800736a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800736c:	f107 0314 	add.w	r3, r7, #20
 8007370:	4619      	mov	r1, r3
 8007372:	481b      	ldr	r0, [pc, #108]	@ (80073e0 <HAL_HCD_MspInit+0xc0>)
 8007374:	f7f9 fcf0 	bl	8000d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007378:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800737c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800737e:	2302      	movs	r3, #2
 8007380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007382:	2300      	movs	r3, #0
 8007384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007386:	2300      	movs	r3, #0
 8007388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800738a:	230a      	movs	r3, #10
 800738c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800738e:	f107 0314 	add.w	r3, r7, #20
 8007392:	4619      	mov	r1, r3
 8007394:	4812      	ldr	r0, [pc, #72]	@ (80073e0 <HAL_HCD_MspInit+0xc0>)
 8007396:	f7f9 fcdf 	bl	8000d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800739a:	4b10      	ldr	r3, [pc, #64]	@ (80073dc <HAL_HCD_MspInit+0xbc>)
 800739c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739e:	4a0f      	ldr	r2, [pc, #60]	@ (80073dc <HAL_HCD_MspInit+0xbc>)
 80073a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073a4:	6353      	str	r3, [r2, #52]	@ 0x34
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	4b0c      	ldr	r3, [pc, #48]	@ (80073dc <HAL_HCD_MspInit+0xbc>)
 80073ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ae:	4a0b      	ldr	r2, [pc, #44]	@ (80073dc <HAL_HCD_MspInit+0xbc>)
 80073b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80073b6:	4b09      	ldr	r3, [pc, #36]	@ (80073dc <HAL_HCD_MspInit+0xbc>)
 80073b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073c2:	2200      	movs	r2, #0
 80073c4:	2100      	movs	r1, #0
 80073c6:	2043      	movs	r0, #67	@ 0x43
 80073c8:	f7f9 fc8f 	bl	8000cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073cc:	2043      	movs	r0, #67	@ 0x43
 80073ce:	f7f9 fca8 	bl	8000d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073d2:	bf00      	nop
 80073d4:	3728      	adds	r7, #40	@ 0x28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	40023800 	.word	0x40023800
 80073e0:	40020000 	.word	0x40020000

080073e4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe ff73 	bl	80062de <USBH_LL_IncTimer>
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe ffab 	bl	800636a <USBH_LL_Connect>
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe ffb4 	bl	8006398 <USBH_LL_Disconnect>
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
 8007444:	4613      	mov	r3, r2
 8007446:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe ff65 	bl	8006332 <USBH_LL_PortEnabled>
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe ff65 	bl	800634e <USBH_LL_PortDisabled>
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800749a:	2b01      	cmp	r3, #1
 800749c:	d12a      	bne.n	80074f4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800749e:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <USBH_LL_Init+0x74>)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a15      	ldr	r2, [pc, #84]	@ (8007500 <USBH_LL_Init+0x74>)
 80074aa:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074ae:	4b14      	ldr	r3, [pc, #80]	@ (8007500 <USBH_LL_Init+0x74>)
 80074b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80074b4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80074b6:	4b12      	ldr	r3, [pc, #72]	@ (8007500 <USBH_LL_Init+0x74>)
 80074b8:	2208      	movs	r2, #8
 80074ba:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80074bc:	4b10      	ldr	r3, [pc, #64]	@ (8007500 <USBH_LL_Init+0x74>)
 80074be:	2201      	movs	r2, #1
 80074c0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007500 <USBH_LL_Init+0x74>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80074c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007500 <USBH_LL_Init+0x74>)
 80074ca:	2202      	movs	r2, #2
 80074cc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007500 <USBH_LL_Init+0x74>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80074d4:	480a      	ldr	r0, [pc, #40]	@ (8007500 <USBH_LL_Init+0x74>)
 80074d6:	f7f9 fdf4 	bl	80010c2 <HAL_HCD_Init>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80074e0:	f7f9 f970 	bl	80007c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80074e4:	4806      	ldr	r0, [pc, #24]	@ (8007500 <USBH_LL_Init+0x74>)
 80074e6:	f7fa fa55 	bl	8001994 <HAL_HCD_GetCurrentFrame>
 80074ea:	4603      	mov	r3, r0
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7fe fee6 	bl	80062c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	200004d4 	.word	0x200004d4

08007504 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800751a:	4618      	mov	r0, r3
 800751c:	f7fa f9c2 	bl	80018a4 <HAL_HCD_Start>
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 f956 	bl	80077d8 <USBH_Get_USB_Status>
 800752c:	4603      	mov	r3, r0
 800752e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007530:	7bbb      	ldrb	r3, [r7, #14]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007550:	4618      	mov	r0, r3
 8007552:	f7fa f9ca 	bl	80018ea <HAL_HCD_Stop>
 8007556:	4603      	mov	r3, r0
 8007558:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	4618      	mov	r0, r3
 800755e:	f000 f93b 	bl	80077d8 <USBH_Get_USB_Status>
 8007562:	4603      	mov	r3, r0
 8007564:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007566:	7bbb      	ldrb	r3, [r7, #14]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007578:	2301      	movs	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007582:	4618      	mov	r0, r3
 8007584:	f7fa fa14 	bl	80019b0 <HAL_HCD_GetCurrentSpeed>
 8007588:	4603      	mov	r3, r0
 800758a:	2b02      	cmp	r3, #2
 800758c:	d00c      	beq.n	80075a8 <USBH_LL_GetSpeed+0x38>
 800758e:	2b02      	cmp	r3, #2
 8007590:	d80d      	bhi.n	80075ae <USBH_LL_GetSpeed+0x3e>
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <USBH_LL_GetSpeed+0x2c>
 8007596:	2b01      	cmp	r3, #1
 8007598:	d003      	beq.n	80075a2 <USBH_LL_GetSpeed+0x32>
 800759a:	e008      	b.n	80075ae <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]
    break;
 80075a0:	e008      	b.n	80075b4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80075a2:	2301      	movs	r3, #1
 80075a4:	73fb      	strb	r3, [r7, #15]
    break;
 80075a6:	e005      	b.n	80075b4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80075a8:	2302      	movs	r3, #2
 80075aa:	73fb      	strb	r3, [r7, #15]
    break;
 80075ac:	e002      	b.n	80075b4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80075ae:	2301      	movs	r3, #1
 80075b0:	73fb      	strb	r3, [r7, #15]
    break;
 80075b2:	bf00      	nop
  }
  return  speed;
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fa f9a5 	bl	8001924 <HAL_HCD_ResetPort>
 80075da:	4603      	mov	r3, r0
 80075dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 f8f9 	bl	80077d8 <USBH_Get_USB_Status>
 80075e6:	4603      	mov	r3, r0
 80075e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007606:	78fa      	ldrb	r2, [r7, #3]
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f7fa f9ad 	bl	800196a <HAL_HCD_HC_GetXferCount>
 8007610:	4603      	mov	r3, r0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800761a:	b590      	push	{r4, r7, lr}
 800761c:	b089      	sub	sp, #36	@ 0x24
 800761e:	af04      	add	r7, sp, #16
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	4608      	mov	r0, r1
 8007624:	4611      	mov	r1, r2
 8007626:	461a      	mov	r2, r3
 8007628:	4603      	mov	r3, r0
 800762a:	70fb      	strb	r3, [r7, #3]
 800762c:	460b      	mov	r3, r1
 800762e:	70bb      	strb	r3, [r7, #2]
 8007630:	4613      	mov	r3, r2
 8007632:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007642:	787c      	ldrb	r4, [r7, #1]
 8007644:	78ba      	ldrb	r2, [r7, #2]
 8007646:	78f9      	ldrb	r1, [r7, #3]
 8007648:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800764a:	9302      	str	r3, [sp, #8]
 800764c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	4623      	mov	r3, r4
 800765a:	f7f9 fd99 	bl	8001190 <HAL_HCD_HC_Init>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	4618      	mov	r0, r3
 8007666:	f000 f8b7 	bl	80077d8 <USBH_Get_USB_Status>
 800766a:	4603      	mov	r3, r0
 800766c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800766e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	bd90      	pop	{r4, r7, pc}

08007678 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007692:	78fa      	ldrb	r2, [r7, #3]
 8007694:	4611      	mov	r1, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f7f9 fe32 	bl	8001300 <HAL_HCD_HC_Halt>
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f898 	bl	80077d8 <USBH_Get_USB_Status>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80076b6:	b590      	push	{r4, r7, lr}
 80076b8:	b089      	sub	sp, #36	@ 0x24
 80076ba:	af04      	add	r7, sp, #16
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	4608      	mov	r0, r1
 80076c0:	4611      	mov	r1, r2
 80076c2:	461a      	mov	r2, r3
 80076c4:	4603      	mov	r3, r0
 80076c6:	70fb      	strb	r3, [r7, #3]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70bb      	strb	r3, [r7, #2]
 80076cc:	4613      	mov	r3, r2
 80076ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80076de:	787c      	ldrb	r4, [r7, #1]
 80076e0:	78ba      	ldrb	r2, [r7, #2]
 80076e2:	78f9      	ldrb	r1, [r7, #3]
 80076e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80076e8:	9303      	str	r3, [sp, #12]
 80076ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80076ec:	9302      	str	r3, [sp, #8]
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	4623      	mov	r3, r4
 80076fa:	f7f9 fe25 	bl	8001348 <HAL_HCD_HC_SubmitRequest>
 80076fe:	4603      	mov	r3, r0
 8007700:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	4618      	mov	r0, r3
 8007706:	f000 f867 	bl	80077d8 <USBH_Get_USB_Status>
 800770a:	4603      	mov	r3, r0
 800770c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800770e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	bd90      	pop	{r4, r7, pc}

08007718 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800772a:	78fa      	ldrb	r2, [r7, #3]
 800772c:	4611      	mov	r1, r2
 800772e:	4618      	mov	r0, r3
 8007730:	f7fa f906 	bl	8001940 <HAL_HCD_HC_GetURBState>
 8007734:	4603      	mov	r3, r0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800774a:	20c8      	movs	r0, #200	@ 0xc8
 800774c:	f7f9 f9ce 	bl	8000aec <HAL_Delay>
  return USBH_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	70fb      	strb	r3, [r7, #3]
 8007766:	4613      	mov	r3, r2
 8007768:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007770:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007772:	78fa      	ldrb	r2, [r7, #3]
 8007774:	68f9      	ldr	r1, [r7, #12]
 8007776:	4613      	mov	r3, r2
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	3317      	adds	r3, #23
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007788:	78fa      	ldrb	r2, [r7, #3]
 800778a:	68f9      	ldr	r1, [r7, #12]
 800778c:	4613      	mov	r3, r2
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	1a9b      	subs	r3, r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	333c      	adds	r3, #60	@ 0x3c
 8007798:	78ba      	ldrb	r2, [r7, #2]
 800779a:	701a      	strb	r2, [r3, #0]
 800779c:	e009      	b.n	80077b2 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800779e:	78fa      	ldrb	r2, [r7, #3]
 80077a0:	68f9      	ldr	r1, [r7, #12]
 80077a2:	4613      	mov	r3, r2
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	1a9b      	subs	r3, r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	440b      	add	r3, r1
 80077ac:	333d      	adds	r3, #61	@ 0x3d
 80077ae:	78ba      	ldrb	r2, [r7, #2]
 80077b0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7f9 f98f 	bl	8000aec <HAL_Delay>
}
 80077ce:	bf00      	nop
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d817      	bhi.n	800781c <USBH_Get_USB_Status+0x44>
 80077ec:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <USBH_Get_USB_Status+0x1c>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	08007805 	.word	0x08007805
 80077f8:	0800780b 	.word	0x0800780b
 80077fc:	08007811 	.word	0x08007811
 8007800:	08007817 	.word	0x08007817
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73fb      	strb	r3, [r7, #15]
    break;
 8007808:	e00b      	b.n	8007822 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800780a:	2302      	movs	r3, #2
 800780c:	73fb      	strb	r3, [r7, #15]
    break;
 800780e:	e008      	b.n	8007822 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007810:	2301      	movs	r3, #1
 8007812:	73fb      	strb	r3, [r7, #15]
    break;
 8007814:	e005      	b.n	8007822 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007816:	2302      	movs	r3, #2
 8007818:	73fb      	strb	r3, [r7, #15]
    break;
 800781a:	e002      	b.n	8007822 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800781c:	2302      	movs	r3, #2
 800781e:	73fb      	strb	r3, [r7, #15]
    break;
 8007820:	bf00      	nop
  }
  return usb_status;
 8007822:	7bfb      	ldrb	r3, [r7, #15]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <malloc>:
 8007830:	4b02      	ldr	r3, [pc, #8]	@ (800783c <malloc+0xc>)
 8007832:	4601      	mov	r1, r0
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	f000 b82d 	b.w	8007894 <_malloc_r>
 800783a:	bf00      	nop
 800783c:	20000030 	.word	0x20000030

08007840 <free>:
 8007840:	4b02      	ldr	r3, [pc, #8]	@ (800784c <free+0xc>)
 8007842:	4601      	mov	r1, r0
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	f000 b8f5 	b.w	8007a34 <_free_r>
 800784a:	bf00      	nop
 800784c:	20000030 	.word	0x20000030

08007850 <sbrk_aligned>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	4e0f      	ldr	r6, [pc, #60]	@ (8007890 <sbrk_aligned+0x40>)
 8007854:	460c      	mov	r4, r1
 8007856:	6831      	ldr	r1, [r6, #0]
 8007858:	4605      	mov	r5, r0
 800785a:	b911      	cbnz	r1, 8007862 <sbrk_aligned+0x12>
 800785c:	f000 f8ae 	bl	80079bc <_sbrk_r>
 8007860:	6030      	str	r0, [r6, #0]
 8007862:	4621      	mov	r1, r4
 8007864:	4628      	mov	r0, r5
 8007866:	f000 f8a9 	bl	80079bc <_sbrk_r>
 800786a:	1c43      	adds	r3, r0, #1
 800786c:	d103      	bne.n	8007876 <sbrk_aligned+0x26>
 800786e:	f04f 34ff 	mov.w	r4, #4294967295
 8007872:	4620      	mov	r0, r4
 8007874:	bd70      	pop	{r4, r5, r6, pc}
 8007876:	1cc4      	adds	r4, r0, #3
 8007878:	f024 0403 	bic.w	r4, r4, #3
 800787c:	42a0      	cmp	r0, r4
 800787e:	d0f8      	beq.n	8007872 <sbrk_aligned+0x22>
 8007880:	1a21      	subs	r1, r4, r0
 8007882:	4628      	mov	r0, r5
 8007884:	f000 f89a 	bl	80079bc <_sbrk_r>
 8007888:	3001      	adds	r0, #1
 800788a:	d1f2      	bne.n	8007872 <sbrk_aligned+0x22>
 800788c:	e7ef      	b.n	800786e <sbrk_aligned+0x1e>
 800788e:	bf00      	nop
 8007890:	200008b4 	.word	0x200008b4

08007894 <_malloc_r>:
 8007894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007898:	1ccd      	adds	r5, r1, #3
 800789a:	f025 0503 	bic.w	r5, r5, #3
 800789e:	3508      	adds	r5, #8
 80078a0:	2d0c      	cmp	r5, #12
 80078a2:	bf38      	it	cc
 80078a4:	250c      	movcc	r5, #12
 80078a6:	2d00      	cmp	r5, #0
 80078a8:	4606      	mov	r6, r0
 80078aa:	db01      	blt.n	80078b0 <_malloc_r+0x1c>
 80078ac:	42a9      	cmp	r1, r5
 80078ae:	d904      	bls.n	80078ba <_malloc_r+0x26>
 80078b0:	230c      	movs	r3, #12
 80078b2:	6033      	str	r3, [r6, #0]
 80078b4:	2000      	movs	r0, #0
 80078b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007990 <_malloc_r+0xfc>
 80078be:	f000 f869 	bl	8007994 <__malloc_lock>
 80078c2:	f8d8 3000 	ldr.w	r3, [r8]
 80078c6:	461c      	mov	r4, r3
 80078c8:	bb44      	cbnz	r4, 800791c <_malloc_r+0x88>
 80078ca:	4629      	mov	r1, r5
 80078cc:	4630      	mov	r0, r6
 80078ce:	f7ff ffbf 	bl	8007850 <sbrk_aligned>
 80078d2:	1c43      	adds	r3, r0, #1
 80078d4:	4604      	mov	r4, r0
 80078d6:	d158      	bne.n	800798a <_malloc_r+0xf6>
 80078d8:	f8d8 4000 	ldr.w	r4, [r8]
 80078dc:	4627      	mov	r7, r4
 80078de:	2f00      	cmp	r7, #0
 80078e0:	d143      	bne.n	800796a <_malloc_r+0xd6>
 80078e2:	2c00      	cmp	r4, #0
 80078e4:	d04b      	beq.n	800797e <_malloc_r+0xea>
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	4639      	mov	r1, r7
 80078ea:	4630      	mov	r0, r6
 80078ec:	eb04 0903 	add.w	r9, r4, r3
 80078f0:	f000 f864 	bl	80079bc <_sbrk_r>
 80078f4:	4581      	cmp	r9, r0
 80078f6:	d142      	bne.n	800797e <_malloc_r+0xea>
 80078f8:	6821      	ldr	r1, [r4, #0]
 80078fa:	1a6d      	subs	r5, r5, r1
 80078fc:	4629      	mov	r1, r5
 80078fe:	4630      	mov	r0, r6
 8007900:	f7ff ffa6 	bl	8007850 <sbrk_aligned>
 8007904:	3001      	adds	r0, #1
 8007906:	d03a      	beq.n	800797e <_malloc_r+0xea>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	442b      	add	r3, r5
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	f8d8 3000 	ldr.w	r3, [r8]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	bb62      	cbnz	r2, 8007970 <_malloc_r+0xdc>
 8007916:	f8c8 7000 	str.w	r7, [r8]
 800791a:	e00f      	b.n	800793c <_malloc_r+0xa8>
 800791c:	6822      	ldr	r2, [r4, #0]
 800791e:	1b52      	subs	r2, r2, r5
 8007920:	d420      	bmi.n	8007964 <_malloc_r+0xd0>
 8007922:	2a0b      	cmp	r2, #11
 8007924:	d917      	bls.n	8007956 <_malloc_r+0xc2>
 8007926:	1961      	adds	r1, r4, r5
 8007928:	42a3      	cmp	r3, r4
 800792a:	6025      	str	r5, [r4, #0]
 800792c:	bf18      	it	ne
 800792e:	6059      	strne	r1, [r3, #4]
 8007930:	6863      	ldr	r3, [r4, #4]
 8007932:	bf08      	it	eq
 8007934:	f8c8 1000 	streq.w	r1, [r8]
 8007938:	5162      	str	r2, [r4, r5]
 800793a:	604b      	str	r3, [r1, #4]
 800793c:	4630      	mov	r0, r6
 800793e:	f000 f82f 	bl	80079a0 <__malloc_unlock>
 8007942:	f104 000b 	add.w	r0, r4, #11
 8007946:	1d23      	adds	r3, r4, #4
 8007948:	f020 0007 	bic.w	r0, r0, #7
 800794c:	1ac2      	subs	r2, r0, r3
 800794e:	bf1c      	itt	ne
 8007950:	1a1b      	subne	r3, r3, r0
 8007952:	50a3      	strne	r3, [r4, r2]
 8007954:	e7af      	b.n	80078b6 <_malloc_r+0x22>
 8007956:	6862      	ldr	r2, [r4, #4]
 8007958:	42a3      	cmp	r3, r4
 800795a:	bf0c      	ite	eq
 800795c:	f8c8 2000 	streq.w	r2, [r8]
 8007960:	605a      	strne	r2, [r3, #4]
 8007962:	e7eb      	b.n	800793c <_malloc_r+0xa8>
 8007964:	4623      	mov	r3, r4
 8007966:	6864      	ldr	r4, [r4, #4]
 8007968:	e7ae      	b.n	80078c8 <_malloc_r+0x34>
 800796a:	463c      	mov	r4, r7
 800796c:	687f      	ldr	r7, [r7, #4]
 800796e:	e7b6      	b.n	80078de <_malloc_r+0x4a>
 8007970:	461a      	mov	r2, r3
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	42a3      	cmp	r3, r4
 8007976:	d1fb      	bne.n	8007970 <_malloc_r+0xdc>
 8007978:	2300      	movs	r3, #0
 800797a:	6053      	str	r3, [r2, #4]
 800797c:	e7de      	b.n	800793c <_malloc_r+0xa8>
 800797e:	230c      	movs	r3, #12
 8007980:	6033      	str	r3, [r6, #0]
 8007982:	4630      	mov	r0, r6
 8007984:	f000 f80c 	bl	80079a0 <__malloc_unlock>
 8007988:	e794      	b.n	80078b4 <_malloc_r+0x20>
 800798a:	6005      	str	r5, [r0, #0]
 800798c:	e7d6      	b.n	800793c <_malloc_r+0xa8>
 800798e:	bf00      	nop
 8007990:	200008b8 	.word	0x200008b8

08007994 <__malloc_lock>:
 8007994:	4801      	ldr	r0, [pc, #4]	@ (800799c <__malloc_lock+0x8>)
 8007996:	f000 b84b 	b.w	8007a30 <__retarget_lock_acquire_recursive>
 800799a:	bf00      	nop
 800799c:	200009f8 	.word	0x200009f8

080079a0 <__malloc_unlock>:
 80079a0:	4801      	ldr	r0, [pc, #4]	@ (80079a8 <__malloc_unlock+0x8>)
 80079a2:	f000 b846 	b.w	8007a32 <__retarget_lock_release_recursive>
 80079a6:	bf00      	nop
 80079a8:	200009f8 	.word	0x200009f8

080079ac <memset>:
 80079ac:	4402      	add	r2, r0
 80079ae:	4603      	mov	r3, r0
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d100      	bne.n	80079b6 <memset+0xa>
 80079b4:	4770      	bx	lr
 80079b6:	f803 1b01 	strb.w	r1, [r3], #1
 80079ba:	e7f9      	b.n	80079b0 <memset+0x4>

080079bc <_sbrk_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4d06      	ldr	r5, [pc, #24]	@ (80079d8 <_sbrk_r+0x1c>)
 80079c0:	2300      	movs	r3, #0
 80079c2:	4604      	mov	r4, r0
 80079c4:	4608      	mov	r0, r1
 80079c6:	602b      	str	r3, [r5, #0]
 80079c8:	f7f8 ffac 	bl	8000924 <_sbrk>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d102      	bne.n	80079d6 <_sbrk_r+0x1a>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	b103      	cbz	r3, 80079d6 <_sbrk_r+0x1a>
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	200009f4 	.word	0x200009f4

080079dc <__errno>:
 80079dc:	4b01      	ldr	r3, [pc, #4]	@ (80079e4 <__errno+0x8>)
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	20000030 	.word	0x20000030

080079e8 <__libc_init_array>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	4d0d      	ldr	r5, [pc, #52]	@ (8007a20 <__libc_init_array+0x38>)
 80079ec:	4c0d      	ldr	r4, [pc, #52]	@ (8007a24 <__libc_init_array+0x3c>)
 80079ee:	1b64      	subs	r4, r4, r5
 80079f0:	10a4      	asrs	r4, r4, #2
 80079f2:	2600      	movs	r6, #0
 80079f4:	42a6      	cmp	r6, r4
 80079f6:	d109      	bne.n	8007a0c <__libc_init_array+0x24>
 80079f8:	4d0b      	ldr	r5, [pc, #44]	@ (8007a28 <__libc_init_array+0x40>)
 80079fa:	4c0c      	ldr	r4, [pc, #48]	@ (8007a2c <__libc_init_array+0x44>)
 80079fc:	f000 f864 	bl	8007ac8 <_init>
 8007a00:	1b64      	subs	r4, r4, r5
 8007a02:	10a4      	asrs	r4, r4, #2
 8007a04:	2600      	movs	r6, #0
 8007a06:	42a6      	cmp	r6, r4
 8007a08:	d105      	bne.n	8007a16 <__libc_init_array+0x2e>
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
 8007a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a10:	4798      	blx	r3
 8007a12:	3601      	adds	r6, #1
 8007a14:	e7ee      	b.n	80079f4 <__libc_init_array+0xc>
 8007a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1a:	4798      	blx	r3
 8007a1c:	3601      	adds	r6, #1
 8007a1e:	e7f2      	b.n	8007a06 <__libc_init_array+0x1e>
 8007a20:	08007b04 	.word	0x08007b04
 8007a24:	08007b04 	.word	0x08007b04
 8007a28:	08007b04 	.word	0x08007b04
 8007a2c:	08007b08 	.word	0x08007b08

08007a30 <__retarget_lock_acquire_recursive>:
 8007a30:	4770      	bx	lr

08007a32 <__retarget_lock_release_recursive>:
 8007a32:	4770      	bx	lr

08007a34 <_free_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4605      	mov	r5, r0
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	d041      	beq.n	8007ac0 <_free_r+0x8c>
 8007a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a40:	1f0c      	subs	r4, r1, #4
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bfb8      	it	lt
 8007a46:	18e4      	addlt	r4, r4, r3
 8007a48:	f7ff ffa4 	bl	8007994 <__malloc_lock>
 8007a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ac4 <_free_r+0x90>)
 8007a4e:	6813      	ldr	r3, [r2, #0]
 8007a50:	b933      	cbnz	r3, 8007a60 <_free_r+0x2c>
 8007a52:	6063      	str	r3, [r4, #4]
 8007a54:	6014      	str	r4, [r2, #0]
 8007a56:	4628      	mov	r0, r5
 8007a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a5c:	f7ff bfa0 	b.w	80079a0 <__malloc_unlock>
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	d908      	bls.n	8007a76 <_free_r+0x42>
 8007a64:	6820      	ldr	r0, [r4, #0]
 8007a66:	1821      	adds	r1, r4, r0
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	bf01      	itttt	eq
 8007a6c:	6819      	ldreq	r1, [r3, #0]
 8007a6e:	685b      	ldreq	r3, [r3, #4]
 8007a70:	1809      	addeq	r1, r1, r0
 8007a72:	6021      	streq	r1, [r4, #0]
 8007a74:	e7ed      	b.n	8007a52 <_free_r+0x1e>
 8007a76:	461a      	mov	r2, r3
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	b10b      	cbz	r3, 8007a80 <_free_r+0x4c>
 8007a7c:	42a3      	cmp	r3, r4
 8007a7e:	d9fa      	bls.n	8007a76 <_free_r+0x42>
 8007a80:	6811      	ldr	r1, [r2, #0]
 8007a82:	1850      	adds	r0, r2, r1
 8007a84:	42a0      	cmp	r0, r4
 8007a86:	d10b      	bne.n	8007aa0 <_free_r+0x6c>
 8007a88:	6820      	ldr	r0, [r4, #0]
 8007a8a:	4401      	add	r1, r0
 8007a8c:	1850      	adds	r0, r2, r1
 8007a8e:	4283      	cmp	r3, r0
 8007a90:	6011      	str	r1, [r2, #0]
 8007a92:	d1e0      	bne.n	8007a56 <_free_r+0x22>
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	6053      	str	r3, [r2, #4]
 8007a9a:	4408      	add	r0, r1
 8007a9c:	6010      	str	r0, [r2, #0]
 8007a9e:	e7da      	b.n	8007a56 <_free_r+0x22>
 8007aa0:	d902      	bls.n	8007aa8 <_free_r+0x74>
 8007aa2:	230c      	movs	r3, #12
 8007aa4:	602b      	str	r3, [r5, #0]
 8007aa6:	e7d6      	b.n	8007a56 <_free_r+0x22>
 8007aa8:	6820      	ldr	r0, [r4, #0]
 8007aaa:	1821      	adds	r1, r4, r0
 8007aac:	428b      	cmp	r3, r1
 8007aae:	bf04      	itt	eq
 8007ab0:	6819      	ldreq	r1, [r3, #0]
 8007ab2:	685b      	ldreq	r3, [r3, #4]
 8007ab4:	6063      	str	r3, [r4, #4]
 8007ab6:	bf04      	itt	eq
 8007ab8:	1809      	addeq	r1, r1, r0
 8007aba:	6021      	streq	r1, [r4, #0]
 8007abc:	6054      	str	r4, [r2, #4]
 8007abe:	e7ca      	b.n	8007a56 <_free_r+0x22>
 8007ac0:	bd38      	pop	{r3, r4, r5, pc}
 8007ac2:	bf00      	nop
 8007ac4:	200008b8 	.word	0x200008b8

08007ac8 <_init>:
 8007ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aca:	bf00      	nop
 8007acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ace:	bc08      	pop	{r3}
 8007ad0:	469e      	mov	lr, r3
 8007ad2:	4770      	bx	lr

08007ad4 <_fini>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	bf00      	nop
 8007ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ada:	bc08      	pop	{r3}
 8007adc:	469e      	mov	lr, r3
 8007ade:	4770      	bx	lr
